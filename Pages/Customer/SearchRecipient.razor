@page "/Customer/SearchRecipient"
<PageTitle>Search Recipient</PageTitle>
@attribute [Authorize]
@*@inject GetReportService getReportService;*@
@inject IHttpService HttpService;
@inject IAuthService AuthService;
@inject IJSRuntime JS;
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration;
@inject  Blazored.Toast.Services.IToastService toastService;
@inject NavigationManager NavigationManager;
@inject BrowserService Service
@using System.Text.RegularExpressions;
@inject ISyncSessionStorageService sessionStorage

<div class="container-fluid"  style="padding-left: 0px!important;padding-right: 15px!important;background:white!important;background-color:white!important;max-height:@MaxHeightBody!important;height:@MaxHeightBody!important;">
    <div class="row" style="padding-bottom: 2px!important;padding-top:5px!important" @onkeypress="@KeySearch">
        <div class="col-12" style="padding-right:0px!important">
            <div class="card">
                <div class="card-header-new" style="padding:15px 5px 5px 5px!important">
                    <section class="ss-panel-new">
                        <span class="ss-header-new">Search Recipient</span>
                        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                            <div class="row g-1">
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="Phone" name="Phone" @bind="@model.Phone" placeholder=" ">
                                        <label class="did-floating-label" for="Phone">Phone</label>
                                    </div>
                                </div>
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="Address" name="Address" @bind="@model.Address" placeholder=" ">
                                        <label class="did-floating-label" for="Address">Address</label>
                                    </div>
                                </div>
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="FullName" name="FullName" @bind="@model.FullName" placeholder=" ">
                                        <label class="did-floating-label" for="FullName">Full Name</label>
                                    </div>
                                </div>
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="BankAccount" name="BankAccount" @bind="@model.BankAccount" placeholder=" ">
                                        <label class="did-floating-label" for="BankAccount">Bank Account</label>
                                    </div>
                                </div>
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="ReceiverID" name="ReceiverID" @bind="@model.ReceiverID" placeholder=" ">
                                        <label class="did-floating-label" for="ReceiverID">Recipient ID</label>
                                    </div>
                                </div>
                               <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="LocalName" name="LocalName" @bind="@model.LocalName" placeholder=" ">
                                        <label class="did-floating-label" for="LocalName">Local Name</label>
                                    </div>
                                </div>
                                 <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="TransID" name="TransID" @bind="@model.TransID" placeholder=" ">
                                        <label class="did-floating-label" for="TransID">Trans ID</label>
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-select" id="StatusID" name="StatusID" @bind="@model.StatusID" aria-label="Status selection">
                                            <option value="0">All Status</option>
                                            @if (TypeofStatusAllList?.Count > 0)
                                            {
                                                @foreach (var t in TypeofStatusAllList)
                                                {
                                                    <option value="@t.StatusID">@t.StatusName</option>
                                                }
                                            }
                                        </select>

                                        <label class="did-floating-label" for="StatusID">Status</label>
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding-top:10px!important;padding-left:3px!important;padding-right:3px!important">
                                <button type="button" class="btn btn-primary" @onclick="ViewReport" disabled="@isViewingReport" style="width:100%!important">
                                    @if (isViewingReport)
                                    {
                                        <span class="spinner-border spinner-border-sm mr-1"></span>
                                    }
                                    Search
                                </button>
                            </div>
                            </div>
                        </EditForm>
                    </section>
                </div>
            </div>
        </div>
    </div>
    @if(isViewTable)
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;;max-height:@MaxHeight!important;height:@MaxHeight!important;">
                    <table class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" style="border-color: #f3f4f4!important">                                       
                            <thead>
                                <tr>
                                    <th>No.</th>
                                        <th style="width:200px!important">
                                            <div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Full Name</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Local Name</span></div></th>
                                                        <th style="width:300px!important" >Address</th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Phone 1</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Phone 2</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Bank Account</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Receiver ID</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Id/PP..</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Status Name</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Reason for Block</span></div></th>
                                                        <th><div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">View History</span></div></th>
                                        @if (AuthService.userMTRedSun.EditProfile == 1)
                                        {
                                            <th>Profile</th>
                                        }
                                </tr>

                            </thead>
                            <tr>
                            </tr>
                            <tbody>
                                @foreach (var item in B_CustomerList)
                                {
                                <tr>
                                    <td>@item.RowNumber</td>
                   
                                <td>  <div class="d-flex flex-column">
                                 
                                            <button type="button" style="padding-top: 0px!important;text-align:left!important"  class="btn btn-link"   @onclick="() => HistoryTransaction(item.B_CUST_ID)">
                            @item.FULLNAME
                        </button>
                                    </div>
            </td>
               
                        <td> <div class="d-flex flex-column">
                                        @item.LOCALNAME
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                        @item.FULLADDRESS
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                        @item.PHONE1
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                            @item.PHONE2
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                        @item.ACCOUNT_NO
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                        @item.PASSPORT_NO
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                        @item.OTHER_B
                                    </div></td>
                        <td> <div class="d-flex flex-column">
                                                    @if (AuthService.userMTRedSun.EditProfile == 1)
                                                    {
                                                        <button type="button" style="padding-top: 0px!important;" class="btn btn-link" @onclick="() => EditStatus(item.B_CUST_ID, item.FULLNAME,item.STATUS)">
                                                            @item.StatusName.ToUpper()
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        @item.StatusName.ToUpper()
                                                    }

                                                </div></td>
                        <td> <div class="d-flex flex-column">
                                        <span class="emp_name text-truncate">@item.ReasonforBlock</span>
                                    </div></td>
                                            <td><a href="@item.LinkHistory" class="btn btn-link">@item.History</a></td>
                                            @if (AuthService.userMTRedSun.EditProfile == 1)
                                            {
                                                    <td style="text-align:center!important">
                                                    <button type="button" style="padding-top: 0px!important;" class="btn btn-link" @onclick="() => EditRecipient(item)">
                            <i class="fas fa-edit" />
                        </button>
                    </td>
                                            }
                    </tr>}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="padding-top:2px!important;padding-bottom:2px!important;">
            <div class="col-sm-12 col-md-6" style="float:right!important">
                <div class="dataTables_paginate paging_simple_numbers" id="basic-datatable_paginate" style="padding-right:10px!important;color: #166178!important">
                    <button class="btn btn-customer" @onclick="@(async()=> await NavigateToPage("first"))">First</button>
                    <button class="btn btn-customer" @onclick="@(async()=> await NavigateToPage("prev"))">Prev</button>
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var currentPage = i;
                        <button class="btn btn-customer @(currentPage==curPage?"btn-danger":"")" @onclick="@(async()=> await RefreshRecord(currentPage))"> @i</button>
                    }
                    <button class="btn btn-customer" @onclick="@(async()=> await NavigateToPage("next"))">Next</button>
                    <button class="btn btn-customer" @onclick="@(async()=> await NavigateToPage("last"))">Last</button>
                </div>

            </div>

            <div class="col-sm-12 col-md-3 float-left" style="float:center!important">
                <div class="dataTables_length" id="basic-datatable_length" style="padding-top:10px!important">
                    @noidungpage
                </div>
            </div>
            <div class="col-sm-12 col-md-3" style="float:left!important">
                <div class="dataTables_length" id="basic-datatable_length">

                    <select name="basic-datatable_length" aria-controls="basic-datatable" class="form-select-pagesize" value="@pageSize" aria-label="Floating label select example" @onchange="ChangepageSize">
                        @foreach (var pagesize in pagesizeModels)
                        {
                            <option value="@pagesize.PageID">@pagesize.PageName</option>
                        }
                    </select>
                </div>
            </div>


        </div>
    }
   @*  @if (IsEditBank)
    {
        <div class="modal fade show" id="editModal" tabindex="-1" style="display:flex;padding-top:3rem!important" aria-modal="true" role="dialog">
            <div class="modal-dialog" role="document" style="max-width:600px">
                <div class="modal-content" style="padding-left: 15px !important; padding-right: 15px !important; padding-bottom: 15px !important">
                    <div class="modal-header" style="padding-bottom: 10px !important">
                        <h5 class="modal-title">Edit Bank</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseEditBank">
                            <span aria-hidden="true" style="font-size: xx-large;">&times;</span>
                        </button>
                    </div>
                    <div class="row g-1">
                        <div class="col-12">
                            <div class="row g-1">

                                <div class="col-md-6" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.BankID" placeholder="  " disabled aria-label="Floating label select example">
                                            @foreach (var item in BankList)
                                            {
                                                <option value="@item.BANK_CODE">@item.BANK_NAME</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Select Bank</label>
                                    </div>
                                </div>
                                <div class="col-md-6" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input NumberOnly" id="floatingInput" @bind="@modelEditBank.AccountNo">
                                        <label class="did-floating-label">Bank Account</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-1" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                        </div>
                        <div class="col-10" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                            <button type="button" class="btn btn-danger" @onclick="DeleteBankAPI" disabled="@IsDelEBank" style="width: 30% !important">
                                @if (IsDelEBank)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Delete
                            </button>

                            <button type="button" class="btn btn-primary" @onclick="UpdateBankAPI" disabled="@IsEBank" style="width: 30% !important">
                                @if (IsEBank)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                <i class="fas fa-edit" />
                                Update
                            </button>

                            <button type="button" class="btn btn-primary" @onclick="CloseEditBank" style="width: 30% !important">
                                Exit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    } *@
   
    @if (@IsAddNewBank)
    {
        <div class="modal fade show" id="editModal" tabindex="-1" style="display:flex;padding-top:3rem!important" aria-modal="true" role="dialog">
            <div class="modal-dialog" role="document" style="max-width:800px">
                <div class="modal-content" style="padding-left: 15px !important; padding-right: 15px !important; padding-bottom: 15px !important">
                    <div class="modal-header" style="padding-bottom: 10px !important">
                        <h5 class="modal-title">Add New Bank</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseNewBank">
                            <span aria-hidden="true" style="font-size: xx-large;">&times;</span>
                        </button>
                    </div>
                    <div class="row g-1">
                        <div class="col-12">
                            <div class="row g-1">
                                <div class="col-md-6" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" value="@modelAddBank.Currency" @onchange="ChangetoAddBank" aria-label="Floating label select example" placeholder="  " @ref="@E_ToCurrency" style="background-color:@C_ToCurrency">
                                            @foreach (var currency in ReceiveCurrencyList)
                                            {
                                                <option value="@currency.CurrencyCode">@currency.CurrencyName</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">To Currency</label>
                                    </div>
                                </div>
                                <div class="col-md-6" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelAddBank.BankID" @onchange="ChangBankAdd" placeholder="  "
                                                aria-label="Floating label select example" @ref="E_BankCode" style="background-color:@C_BankCode">
                                            @foreach (var item in BankList)
                                            {
                                                <option value="@item.BANK_CODE">@item.BANK_NAME</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Select Bank</label>
                                    </div>

                                </div>
                                <div class="col-md-12" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelAddBank.BANK_NAME" style="background-color:@C_BankName" placeholder="  " @ref="E_BankName" disabled=@isBankOther>
                                        <label class="did-floating-label">Bank Name</label>
                                    </div>
                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry;padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelAddBank.Swiftcode" disabled="disabled" placeholder="  " @ref="E_BankName" style="background-color:@C_BankName">
                                        <label class="did-floating-label">Swiftcode</label>
                                    </div>
                                </div>


                                @*  <div class="col-md-6" style="display:@displayBankCountry ;padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                            <div class="did-floating-label-content">
                            <select class="did-floating-input"  id="floatingSelectGrid" value="@modelAddBank.MainBank" @onchange="ChangMainBankAdd"  placeholder="  " aria-label="Floating label select example"   @ref="E_MainBank" style="background-color:@C_MainBank" >
                            @foreach (var item in MainBanksList)
                            {
                            <option value="@item.MainBank">@item.MainBank</option>
                            }
                            </select>
                            <label class="did-floating-label" >Main Bank</label>
                            </div>

                            </div> *@
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelAddBank.bankCity" @onchange="ChangMainCityAdd" placeholder="  " aria-label="Floating label select example" @ref="E_MainBank" style="background-color:@C_MainBank">
                                            @foreach (var item in BankCityList)
                                            {
                                                <option value="@item.City">@item.City</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Main Type</label>
                                    </div>

                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelAddBank.Province" @onchange="ChangBankProvinceAdd" placeholder="  " aria-label="Floating label select example" @ref="E_BankProvince" style="background-color:@C_BankProvince">
                                            @foreach (var item in ProvinceBankList)
                                            {
                                                <option value="@item.StateCode">@item.StateName</option>
                                            }

                                        </select>
                                        <label class="did-floating-label">Bank Province</label>
                                    </div>

                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelAddBank.City" placeholder="  " @onchange="ChangBankCityAdd" aria-label="Floating label select example" @ref="E_BankCity" style="background-color:@C_BankCity">
                                            @foreach (var item in BankDistrictList)
                                            {
                                                <option value="@item.City">@item.City</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Bank City</label>
                                    </div>

                                </div>


                                <div class="col-md-6" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input NumberOnly" id="floatingInput" 
                                        value="@modelAddBank.AccountNo" @onchange="ChangeBankAdd" style="background-color:@C_AccountNo" placeholder="  " @ref="E_AccountNo">
                                        <label class="did-floating-label">Bank Account</label>
                                    </div>
                                </div>


                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-2" style="padding-top:15px!important;text-align:center">
                        </div>
                        <div class="col-4" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                            <button type="button" class="btn btn-primary" @onclick="AddNewBankAPI" disabled="@isAddBank" style="width: 100% !important">
                                @if (isAddBank)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                <i class="bx bx-plus bx-xs me-1"></i>
                                Add New
                            </button>
                        </div>
                        <div class="col-4" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                            <button type="button" class="btn btn-primary" @onclick="CloseNewBank" style="width: 100% !important">
                                Exit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (IsEditBank)
    {
        <div class="modal fade show" id="editModal" tabindex="-1" style="display:flex;padding-top:3rem!important" aria-modal="true" role="dialog">
            <div class="modal-dialog" role="document" style="max-width:800px">
                <div class="modal-content" style="padding-left: 15px !important; padding-right: 15px !important; padding-bottom: 15px !important">
                    <div class="modal-header" style="padding-bottom: 10px !important">
                        <h5 class="modal-title">Edit Bank</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseEditBank">
                            <span aria-hidden="true" style="font-size: xx-large;">&times;</span>
                        </button>
                    </div>
                    <div class="row g-1">
                        <div class="col-12">
                            <div class="row g-1">
                                <div class="col-md-6" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" value="@modelEditBank.Currency" @onchange="ChangetoEditBank" aria-label="Floating label select example" placeholder="  " @ref="@E_ToCurrency" style="background-color:@C_ToCurrency">
                                            @foreach (var currency in ReceiveCurrencyList)
                                            {
                                                <option value="@currency.CurrencyCode">@currency.CurrencyName</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">To Currency</label>
                                    </div>
                                </div>
                                <div class="col-md-6" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.BankID" @onchange="ChangBankUpdate" placeholder="  " aria-label="Floating label select example" @ref="E_BankCode" style="background-color:@C_BankCode">
                                            @foreach (var item in BankList)
                                            {
                                                <option value="@item.BANK_CODE">@item.BANK_NAME</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Select Bank</label>
                                    </div>
                                </div>
                                <div class="col-md-12" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBank.BANK_NAME" style="background-color:@C_BankName" placeholder="  " @ref="E_BankName" disabled=@isBankOther>
                                        <label class="did-floating-label">Bank Name</label>
                                    </div>

                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry;padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBank.Swiftcode" disabled="disabled" placeholder="  " @ref="E_BankName" style="background-color:@C_BankName">
                                        <label class="did-floating-label">Swiftcode</label>
                                    </div>
                                </div>

                                @*    <div class="col-md-6" style="display:@displayBankCountry ;padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:4px!important">
                            <div class="did-floating-label-content">
                            <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.MainBank" @onchange="ChangMainBankEdit" placeholder="  " aria-label="Floating label select example" @ref="E_MainBank" style="background-color:@C_MainBank">
                            @foreach (var item in MainBanksList)
                            {
                            <option value="@item.MainBank">@item.MainBank</option>
                            }
                            </select>
                            <label class="did-floating-label" >Main Bank</label>
                            </div>

                            </div> *@
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.bankCity"
                                                @onchange="ChangMainCityEdit" placeholder="  " aria-label="Floating label select example" @ref="E_MainBank" style="background-color:@C_MainBank">
                                            @foreach (var item in BankCityList)
                                            {
                                                <option value="@item.City">@item.City</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Main Type</label>
                                    </div>

                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.Province" @onchange="ChangBankProvinceEdit" placeholder="  " aria-label="Floating label select example" @ref="E_BankProvince" style="background-color:@C_BankProvince">
                                            @foreach (var item in ProvinceBankList)
                                            {
                                                <option value="@item.StateCode">@item.StateName</option>
                                            }

                                        </select>
                                        <label class="did-floating-label">Bank Province</label>
                                    </div>

                                </div>
                                <div class="col-md-6" style="display:@displayBankCountry ;padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" id="floatingSelectGrid" value="@modelEditBank.City"  @onchange="ChangBankCityEdit"  placeholder="  " aria-label="Floating label select example" @ref="E_BankCity" style="background-color:@C_BankCity">
                                            @foreach (var item in BankDistrictList)
                                            {
                                                <option value="@item.City">@item.City</option>
                                            }
                                        </select>
                                        <label class="did-floating-label">Bank City</label>
                                    </div>

                                </div>

                                <div class="col-md-6" style="padding-top:4px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:3px!important;">
                                    <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input NumberOnly" id="floatingInput" 
                                        value="@modelEditBank.AccountNo" @onchange="ChangeBankEdit" style="background-color:@C_AccountNo" placeholder="  " @ref="E_AccountNo">
                                        <label class="did-floating-label">Bank Account</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-2" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                        </div>
                        <div class="col-8" style="padding-top:15px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                            <button type="button" class="btn btn-danger" @onclick="DeleteBankAPI" disabled="@IsDelEBank" style="width: 30% !important">
                                @if (IsDelEBank)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Delete
                            </button>

                            <button type="button" class="btn btn-primary" @onclick="UpdateBankAPI" disabled="@IsEBank" style="width: 30% !important">
                                @if (IsEBank)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                <i class="fas fa-edit" />
                                Update
                            </button>

                            <button type="button" class="btn btn-primary" @onclick="CloseEditBank" style="width: 30% !important">
                                Exit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (Viewhistory)
    {
         <div class="modal fade show" id="editModal" tabindex="-1" style="display:flex;padding-top:3rem!important" aria-modal="true" role="dialog">
            <div class="modal-dialog" role="document" style="max-width:600px">
                <div class="modal-content" style="padding-left: 15px !important; padding-right: 15px !important; padding-bottom: 15px !important">
                    <div class="modal-header" style="padding-bottom: 10px !important">
                        <h5 class="modal-title">History Sender</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseHis">
                            <span aria-hidden="true" style="font-size: xx-large;">&times;</span>
                        </button>
                    </div>
                    <div class="row g-1">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;">
                                    <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" style="border-color: #f3f4f4!important;">
                                        <thead>
                                            <tr>
                                                <th>No</th>
                                                <th>Trans ID</th>
                                                <th>Sender</th>
                                                <th>Amount</th>
                                               @*  <th>Reorder</th> *@
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (HistoryCustomerSendList != null)
                                            {
                                                @foreach (var item in HistoryCustomerSendList)
                                                {
                                                    <tr>
                                                        <td>@item.RowNumber</td>
                                                        <td>
                                                            <div class="d-flex justify-content-start align-items-center user-name">
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate fw-semibold"> @item.TRANS_ID</span>
                                                                    <small class="emp_post text-truncate">@item.TRANS_DATE</small>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="d-flex justify-content-start align-items-center user-name">
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate fw-semibold"> @item.FULLNAME</span>
                                                                   @*  <small class="emp_post text-muted">@item.S_FULLADDRESS</small>
                                                                    <small class="emp_post text-truncate">@item.PHONE1</small> *@
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td style="text-align:right!important">@String.Format("{0:n2}", @item.AMOUNT)</td>
                                                        @* <td style="text-align:center!important">
                                                            @if ((@item.StatusNameBlock.ToUpper().Contains("ALLOW") || @item.StatusNameBlock.ToUpper().Contains("ACTIVE")) && (@item.StatusName.ToUpper().Contains("ALLOW") || @item.StatusName.ToUpper().Contains("ACTIVE")))
                                                            {
                                                                <a href="@item.ReOrder">Reorder</a>
                                                            }
                                                        </td> *@
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                </div>
            </div>
         </div>
      </div>
    }
    <MudDialog @bind-IsVisible="@isModalStatusVisible" Options="@(new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true })">
        <DialogContent>
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <EditForm Model="@modelStatus">
                            <div class="row">
                                <div class="col-md-12" style="margin:5px!important">
                                    <span>B Cust ID:</span>
                                    <span class="fw-bold me-2">@modelStatus.BCustID</span>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12" style="margin:5px!important">
                                    <span>Full Name:</span>
                                    <span class="fw-bold me-2">@modelStatus.Fullname</span>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12" style="margin:5px!important;padding-right: 30px!important">
                                    <div class="did-floating-label-content">
                                        <select class="did-floating-input" @bind="@modelStatus.StatusID" aria-label="Floating label select example" @ref="@E_Status" style="background-color:@C_Status" placeholder="  ">
                                            @if (TypeofStatusList.Count > 0)
                                            {
                                                @foreach (var t in TypeofStatusList)
                                                {
                                                    <option value="@t.StatusID">@t.StatusName</option>
                                                }
                                            }
                                        </select>
                                        <label class="did-floating-label">Status</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12" style="margin:5px!important;padding-right: 30px!important;">
                                    <div class="did-floating-label-content">
                                        <textarea type="text" class="did-floating-input" style="height:60px!important;background-color:@C_ReasonforUpdate" id="floatingInput" @bind="@modelStatus.ReasonforUpdate" @ref="@E_ReasonforUpdate" placeholder="  "></textarea>
                                        <label class="did-floating-label">Note</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12" style="margin:5px!important;text-align:center!important;vertical-align:central">
                                    <button type="button" class="btn btn-primary" @onclick="UpdateStatus" style="width:150px!important">
                                        Update
                                    </button>
                                    <button type="button" class="btn btn-warning" @onclick="CloseStatus" style="width: 150px !important">
                                        Exit
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </DialogContent>
    </MudDialog>
    <MudDialog @bind-IsVisible="@isModalVisible" Options="@(new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true })">
        <DialogContent>
            <div class="row g-1">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;">
                                    <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" style="border-color: #f3f4f4!important;">
                                        <thead>
                                            <tr>
                                                <th>No</th>
                                                <th>Trans ID</th>
                                                <th>Sender</th>
                                                <th>Amount</th>
                                               @*  <th>Reorder</th> *@
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (HistoryCustomerSendList != null)
                                            {
                                                @foreach (var item in HistoryCustomerSendList)
                                                {
                                                    <tr>
                                                        <td>@item.RowNumber</td>
                                                        <td>
                                                            <div class="d-flex justify-content-start align-items-center user-name">
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate fw-semibold"> @item.TRANS_ID</span>
                                                                    <small class="emp_post text-truncate">@item.TRANS_DATE</small>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="d-flex justify-content-start align-items-center user-name">
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate fw-semibold"> @item.FULLNAME</span>
                                                                   @*  <small class="emp_post text-muted">@item.S_FULLADDRESS</small>
                                                                    <small class="emp_post text-truncate">@item.PHONE1</small> *@
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td style="text-align:right!important">@String.Format("{0:n2}", @item.AMOUNT)</td>
                                                        @* <td style="text-align:center!important">
                                                            @if ((@item.StatusNameBlock.ToUpper().Contains("ALLOW") || @item.StatusNameBlock.ToUpper().Contains("ACTIVE")) && (@item.StatusName.ToUpper().Contains("ALLOW") || @item.StatusName.ToUpper().Contains("ACTIVE")))
                                                            {
                                                                <a href="@item.ReOrder">Reorder</a>
                                                            }
                                                        </td> *@
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                </div>
        </DialogContent>
        @* <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        </FooterTemplate> *@
    </MudDialog>
    <MudDialog @bind-IsVisible="@isModalProfileVisible" Options="@(new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true })">
        <DialogContent>
            <div class="row g-1">
                <MudTabs Outlined="true" @bind-ActivePanelIndex="activeIndex">
                    <MudTabPanel Text="Recipient Profile" Icon="@Icons.Material.Filled.SettingsApplications">
                        <EditForm Model="@modelEditBCust">
                            <div class="card" style="padding-top:15px!important">
                                <section class="ss-panel-new1">
                                    <span class="ss-header-new">Recipient Profile</span>
                                    <div class="row g-1">
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input CharacterOnly" id="floatingInput" @bind="@modelEditBCust.LASTNAME" @ref="E_RLastName" style="background-color:@C_RLastName" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Last Name</label>
                                            </div>
                                        </div>

                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input CharacterOnly" id="floatingInput" @bind="@modelEditBCust.MIDDLENAME" @ref="E_RMiddleName" style="background-color:@C_RMiddleName" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">M Name</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input CharacterOnly" id="floatingInput" @bind="@modelEditBCust.FIRSTNAME" @ref="E_RFirstName" style="background-color:@C_RFirstName" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">First Name</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input CharacterOnly" id="floatingInput" @bind="@modelEditBCust.LOCALNAME" @ref="E_RLocalName" style="background-color:@C_RLocalName" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Local Name</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input NumberOnly" id="floatingInput" value="@modelEditBCust.PASSPORT_NO" @ref="E_RID" style="background-color:@C_RID" placeholder="  " @onchange="ChangeRID" disabled=@isEditRecipient>
                                                <label class="did-floating-label">Recipient ID</label>
                                            </div>
                                        </div>
                                        @* <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                        <div class="did-floating-label-content">
                                        <input type="text" class="did-floating-input CharacterOnly" id="floatingInput" @bind="@modelEditBCust.CN_FIRSTNAME" @ref="E_RFullName2" style="background-color:@C_RFullName2" placeholder="  " disabled=@isEditRecipient>
                                        <label class="did-floating-label">Recipient 2</label>
                                        </div>
                                        </div>*@
                                        <div class="col-md-12" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBCust.ADDRESS" @ref="E_RAddress" style="background-color:@C_RAddress" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Address</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            @*<MudTextField @bind-Value="@model.RZipcode" Label="Zipcode" Variant="Variant.Outlined" Margin="Margin.Dense"  TextChanged="ZipcodeReciverChange"  Disabled=@D_RZipcode></MudTextField>*@
                                            <div class="did-floating-label-content">
                                                <input type="number" class="did-floating-input NumberOnly" id="floatingInput" value="@modelEditBCust.ZIP_CODE" @onchange="ZipcodeReciverChange" @ref="E_RZipcode" style="background-color:@isEditRecipient" placeholder="  ">
                                                <label class="did-floating-label">Zipcode</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <select class="did-floating-input" id="RState" name="RState" value="@modelEditBCust.PROVINCE_ID" @onchange="ChangeRState" @ref="E_RState" style="background-color:@C_RState" aria-label="Floating label select example" placeholder="  " disabled=@isEditRecipient>
                                                    @foreach (var province in ReceiveStateList)
                                                    {
                                                        <option value="@province.StateCode"> @province.StateName</option>
                                                    }
                                                </select>
                                                <label class="did-floating-label">State / Province</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <select class="did-floating-input" id="RCity" name="RCity" value="@modelEditBCust.CITY" @ref="E_RCity" style="background-color:@C_RCity;display:@displayCityPH" aria-label="Floating label select example" placeholder="  " disabled=@isEditRecipient>
                                                    @foreach (var item in BCityStateList)
                                                    {
                                                        <option value="@item.City"> @item.City</option>
                                                    }
                                                </select>

                                                <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBCust.CITY" @ref="E_RCity" style="background-color:@C_RCity;display:@displayCityNoPH" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">City</label>
                                            </div>
                                        </div>


                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">

                                            @*<MudTextField  @bind-Value="@modelEditBCust.RPhone" Label="Phone" Variant="Variant.Outlined" Margin="Margin.Dense" ></MudTextField>*@
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input NumberOnly" id="floatingInput" @bind="@modelEditBCust.PHONE1" @ref="E_RPhone" style="background-color:@C_RPhone" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Phone</label>
                                            </div>
                                        </div>


                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            @* <MudTextField  @bind-Value="@modelEditBCust.RPhone2" Label="Phone 2" Variant="Variant.Outlined" Margin="Margin.Dense"   ></MudTextField>*@
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input NumberOnly" id="floatingInput" @bind="@modelEditBCust.PHONE2" @ref="E_RPhone2" style="background-color:@C_RPhone2" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Phone 2</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="email" class="did-floating-input" id="floatingInput" @bind="@modelEditBCust.EMAIL" @ref="E_REmail" style="background-color:@C_REmail" placeholder="  " disabled=@isEditRecipient>
                                                <label class="did-floating-label">Email</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <select class="did-floating-input" @bind="@modelEditBCust.STATUS" aria-label="Floating label select example" placeholder="  " disabled=@isEditRecipient @ref="@E_Status" style="background-color:@C_Status">
                                                    @if (TypeofStatusList.Count > 0)
                                                    {
                                                        @foreach (var t in TypeofStatusList)
                                                        {
                                                            <option value="@t.StatusID">@t.StatusName</option>
                                                        }
                                                    }
                                                </select>
                                                <label class="did-floating-label">Status</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBCust.ReasonforBlock" placeholder="  " disabled=@isEditRecipient @ref="@E_ReasonforBlock" style="background-color:@C_ReasonforBlock">
                                                <label class="did-floating-label">Reason for block</label>
                                            </div>
                                        </div>
                                        <div class="col-md-4" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;">
                                            <div class="did-floating-label-content">
                                                <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelEditBCust.COMMENT" placeholder="  " disabled=@isEditRecipient @ref="@E_ReasonforUpdate" style="background-color:@C_ReasonforUpdate">
                                                <label class="did-floating-label">Reason for Update</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" style="padding-bottom:15px!important;padding-top:10px!important">
                                        <div class="col-md-3" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                        </div>
                                        <div class="col-md-2" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                            <button type="button" class="btn btn-primary" @onclick="editBCustomerReport" style="width:100%!important">
                                                Edit
                                            </button>
                                        </div>
                                        <div class="col-md-2" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                            <button type="button" class="btn btn-primary" @onclick="UpdateBProfile" style="width:100%!important" disabled=@iseditBCustomer>
                                                Update
                                            </button>
                                        </div>
                                        <div class="col-md-2" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                            <button type="button" class="btn btn-warning" @onclick="CloseBEditModel" style="width: 100% !important">
                                                Exit
                                            </button>
                                        </div>
                                    </div>

                                </section>
                            </div>
                        </EditForm>
                    </MudTabPanel>
                    <MudTabPanel Text="Bank Account">
                        <div class="col-md-12" style="padding-top:5px!important;padding-left:3px!important;padding-right:3px!important;padding-bottom:5px!important;text-align:right!important ">


                            <button type="button" class="btn btn-primary" style="width:150px!important" @onclick="AddNewBank">
                                <i class="bx bx-plus bx-xs me-1"></i>Add
                            </button>

                        </div>

                        <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;max-height:390px!important;height:390px!important">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-datatable dataTable_select nowrap table-responsive">

                                        <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" style="border-color: #f3f4f4!important;">
                                            <thead>
                                                <tr>
                                                    <th>No.</th>
                                                    <th>
                                                        <div class="d-flex flex-column">
                                                            <span class="emp_name text-truncate"> Bank Account</span>
                                                        </div>
                                                    </th>
                                                    <th>Bank Name</th>
                                                    <th>Swiftcode</th>
                                                    <th>Currency</th>
                                                    <th>Created by</th>
                                                    <th>Edited by</th>

                                                    <th style="text-align:center!important">  <i class="fas fa-edit" /></th>


                                                </tr>

                                            </thead>
                                            <tr>
                                            </tr>
                                            <tbody>
                                                @foreach (var item in BankIDList)
                                                {
                                                    <tr>
                                                        <td>@item.RowNumber</td>
                                                        <td>@item.ACCOUNT_NO</td>
                                                        <td>@item.BANK_NAME</td>
                                                        <td>@item.SWIFTCODE</td>
                                                        <td>@item.CURRENCY</td>
                                                        <td>
                                                            <div class="d-flex flex-column">
                                                                <span class="emp_name"> @item.CREATEBY</span>
                                                                <small class="emp_name"> @item.CREATEDATE</small>
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <div class="d-flex flex-column">
                                                                <span class="emp_name"> @item.EDITBY</span>
                                                                <small class="emp_name"> @item.EDITDATE</small>
                                                            </div>
                                                        </td>
                                                        <td style="text-align:center!important">
                                                            @if (item.SWIFTCODE == "OTHER" || item.SWIFTCODE.Length == 11 || modelEditBCust.COUNTRY == "VN" || item.BANK_ADDRESS.Contains("CN4-CHINA-RMB"))
                                                            {
                                                                <button type="button" style="padding-top: 0px!important;" class="btn btn-link" @onclick="() => EditBank(item)">
                                                                    <i class="fas fa-edit" />
                                                                </button>
                                                            }
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </MudTabPanel>
                    <MudTabPanel Text="Recipient Documents">
                        <form>
                            <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important">
                                @if (IsViewDelete)
                                {
                                    <div class="modal fade show" id="editModalDelete" tabindex="-1" style="display:flex;padding-top:3rem!important" aria-modal="true" role="dialog" @onkeydown="BCloseDelete">
                                        <div class="modal-dialog" role="document" style="max-width:80%!important">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Confirm Delete</h5>

                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="BCloseDelete">
                                                        <span aria-hidden="true" style="font-size: xx-large;">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="row" style="padding:20px!important">
                                                    <div class="col-12" style="text-align:center!important">
                                                        Do you want to delete this File???
                                                    </div>

                                                </div>
                                                <div class="row" style="padding-bottom:40px!important">
                                                    <div class="col-md-4" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                                    </div>
                                                    <div class="col-md-4" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                                        <button type="button" class="btn btn-primary" @onclick="BConfirmBDeleteFile" style="width:100px!important">

                                                            Delete
                                                        </button>
                                                        <button type="button" class="btn btn-primary" @onclick="NotBConfirmBDeleteFile" style="width:100px!important">

                                                            Cancel
                                                        </button>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-12">
                                        <div class="card" style="padding-top:15px!important">
                                            <section class="ss-panel-new1">
                                                <span class="ss-header-new">Upload file</span>
                                                @*<h4 class="header-title mb-1">Báo cáo hồ sơ</h4>*@
                                                <EditForm Model="@modelfile">
                                                    <div class="row g-1">

                                                        <div class="col-md-4" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                                            <div class="did-floating-label-content">
                                                                <input type="text" class="did-floating-input" id="floatingInput" @bind="@modelfile.FileName" placeholder="  " @ref="@E_FileName" style="background-color:@C_FileName">
                                                                <label class="did-floating-label">File Name</label>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                                            <InputFile OnChange="@LoadFiles" multiple accept=".xls,.xlsx,.doc,.docx,.pdf,.jpg,.gif,.png" />
                                                        </div>
                                                        <div class="col-md-4" style="padding-top:8px!important;padding-left:10px!important;padding-right:10px!important">
                                                            <button type="button" class="btn btn-primary" @onclick="BUploadFile" disabled="@isBUploadFileB" style="width:200px!important">
                                                                @if (isBUploadFileB)
                                                                {
                                                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                                                }
                                                                Upload File
                                                            </button>
                                                        </div>
                                                    </div>
                                                </EditForm>
                                            </section>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12">
                                        <div class="card">
                                            <div class="card-datatable dataTable_select nowrap table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;max-height:300px!important;height:300px!important">
                                                <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" disabled=@isEditRecipient style="border-color: #f3f4f4!important;">
                                                    <thead>
                                                        <tr>
                                                            <th>No.</th>
                                                            <th>
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate">File Name</span>
                                                                </div>
                                                            </th>
                                                            <th>File</th>
                                                            <th>Download</th>
                                                            <th>Delete</th>
                                                            <th>
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate">Created by </span>
                                                                </div>
                                                            </th>
                                                            <th>
                                                                <div class="d-flex flex-column">
                                                                    <span class="emp_name text-truncate">Created Date</span>
                                                                </div>
                                                            </th>
                                                            @*  <th>
                                                            <div class="d-flex flex-column">
                                                            <span class="emp_name text-truncate">Edited by </span>
                                                            </div>
                                                            </th>

                                                            <th>
                                                            <div class="d-flex flex-column">
                                                            <span class="emp_name text-truncate">Edited Date</span>
                                                            </div>
                                                            </th> *@
                                                        </tr>
                                                    </thead>
                                                    <tr>
                                                    </tr>
                                                    <tbody>
                                                        @foreach (var item in BSenderDocumentsList)
                                                        {

                                                            <tr>
                                                                <td>@item.RowNumber</td>

                                                                <td>@item.FileName1</td>
                                                                <td>@item.FileName</td>

                                                                <td style="text-align:center!important">
                                                                    @if (!String.IsNullOrEmpty(@item.FileName))
                                                                    {
                                                                        <button type="button" class="btn btn-link" @onclick="() => BDownloadFileFromStream(item.FileName,item.No)">
                                                                            <i class="bx bx-download mx-1"></i>
                                                                        </button>
                                                                    }

                                                                </td>
                                                                <td style="text-align:center!important">
                                                                    <button type="button" class="btn btn-link" @onclick="() => BDeleteFile(item.No)">
                                                                        <i class="bx bx-trash"></i>
                                                                    </button>
                                                                </td>
                                                                <td>@item.CreateBy</td>
                                                                <td>@item.CreateDate</td>
                                                                @*   <td>@item.EditBy</td>
                                                            <td>@item.EditDate</td> *@
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>

                    </MudTabPanel>
                    <MudTabPanel Text="Edit History">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;max-height:390px!important;height:390px!important">
                                    <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" disabled=@isEditRecipient style="border-color: #f3f4f4!important;">
                                        <thead>
                                            <tr>
                                                <th>No.</th>
                                                <th>
                                                    <div class="d-flex flex-column">
                                                        <span class="emp_name text-truncate">Reipient Name</span>
                                                    </div>
                                                </th>
                                                <th>
                                                    <div class="d-flex flex-column">
                                                        <span class="emp_name text-truncate">Rec ID</span>
                                                    </div>
                                                </th>
                                                <th>
                                                    <div class="d-flex flex-column">
                                                        <span class="emp_name text-truncate">Reason for update</span>
                                                    </div>
                                                </th>

                                                <th>
                                                    <div class="d-flex flex-column">
                                                        <span class="emp_name text-truncate">Edit By</span>
                                                    </div>
                                                </th>
                                                @*   <th>
                                                <div class="d-flex flex-column">
                                                <span class="emp_name text-truncate">Edit Date</span>
                                                </div>
                                                </th> *@
                                            </tr>

                                        </thead>
                                        <tr>
                                        </tr>
                                        <tbody>

                                            @foreach (var item in EditHistoryList)
                                            {

                                                <tr>

                                                    <td>@item.RowNumber</td>
                                                    <td>
                                                        <div class="d-flex justify-content-start align-items-center user-name">
                                                            <div class="d-flex flex-column">
                                                                <span class="emp_name text-truncate">@item.LASTNAME  @item.MIDDLENAME @item.FIRSTNAME</span>
                                                                <small class="emp_post ext-muted">@item.ADDRESS @item.CITY @item.PROVINCE_ID @item.ZIP_CODE</small>
                                                                <small class="emp_post text-truncate">@item.PHONE1 </small>
                                                            </div>
                                                        </div>
                                                    </td>

                                                    <td>@item.PASSPORT_NO</td>
                                                    <td>
                                                        <div class="d-flex flex-column">
                                                            <span class="emp_name">@item.COMMENT</span>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="d-flex flex-column">
                                                            <span class="emp_name text-truncate"> @item.EDITBY</span>
                                                            <span class="emp_name"> @item.EDITDATE</span>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                    </MudTabPanel>
                    <MudTabPanel Text="Block History">
                        <div class="card-datatable dataTable_select table-responsive" style="padding-bottom: 0px!important;padding-top: 5px!important;max-height:390px!important;height:390px!important">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-datatable dataTable_select nowrap table-responsive">
                                        <table id="basic-datatable" class="table-striped table table-bordered dt-select-table table table-bordered dataTable no-footer dt-checkboxes-select" disabled=@isEditRecipient style="border-color: #f3f4f4!important;">
                                            <thead>
                                                <tr>
                                                    <th>No.</th>
                                                    @* <th>Cust ID</th>*@
                                                    <th>Reason</th>
                                                    <th>Status</th>
                                                    <th>
                                                        <div class="d-flex flex-column">
                                                            <span class="emp_name text-truncate">Action</span>
                                                        </div>
                                                    </th>


                                                </tr>

                                            </thead>
                                            <tr>
                                            </tr>
                                            <tbody>
                                                @foreach (var item in BlockHistoryList)
                                                {
                                                    <tr>
                                                        <td>@item.RowNumber</td>
                                                        @* <td>@item.CUST_ID</td>*@
                                                        <td>
                                                            <div class="d-flex flex-column">
                                                                <span class="emp_name">@item.COMMENT</span>
                                                            </div>
                                                        </td>
                                                        <td>@item.ACTION_TYPE</td>

                                                        <td>
                                                            <div class="d-flex flex-column">
                                                                <span class="emp_name"> @item.ActionBy</span>
                                                                <span class="emp_name"> @item.ActionDate</span>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </MudTabPanel>


                </MudTabs>
            </div>
        </DialogContent>
    </MudDialog>
</div>
<script>
  window.sendTab = function () {
    let active = document.activeElement;
    if (!active) return;
    let formElements = Array.from(document.querySelectorAll('input, button, select, textarea, a[href]'));
    let index = formElements.indexOf(active);
    if (index > -1 && index + 1 < formElements.length) {
        formElements[index + 1].focus();
    }
  }
</script>
@code{
    public class ModelStatus
    {
        public string?  BCustID { get; set; } = "";
        public string?  Fullname { get; set; } = "";
        public int StatusID { get; set; } = 0;
        public string?  ReasonforUpdate { get; set; } = "";
    }
    public ModelStatus modelStatus = new ModelStatus();
    public class BUploadFileModel
    {
        public string?  Form { get; set; } = "";
        public string?  FormName { get; set; } = "";
        public string?  Action { get; set; } = "";
        public string?  UserName { get; set; } = "";
        public string?  UserID { get; set; } = "";
        public string?  B_CUST_ID { get; set; } = "";
        public List<CustomerProfileFile> SenderDocumentsLists { get; set; } = new List<CustomerProfileFile>();

    }
    List<pageSizeModel> pagesizeModels = new List<pageSizeModel>
    {
        new pageSizeModel { PageID = 10, PageName = "10" },
        new pageSizeModel { PageID = 20, PageName = "20" },
        new pageSizeModel { PageID = 50, PageName = "50" },
        new pageSizeModel { PageID = 100, PageName = "100" },
        new pageSizeModel { PageID = 200, PageName = "200" },
        new pageSizeModel { PageID = 500, PageName = "500" },
        new pageSizeModel { PageID = 1000, PageName = "1000" },
        new pageSizeModel { PageID = 2000, PageName = "2000" },
        new pageSizeModel { PageID = 5000, PageName = "5000" },
        new pageSizeModel { PageID = 500000, PageName = "All" }
    };
    public class ModelSearch
    {

        public string?  StatusID { get; set; } = "0";
        public string?  CustID { get; set; } = "";
        public string?  TransID { get; set; } = "";        
        public string?  B_CustID { get; set; } = "";
        public string?  UserID { get; set; } = "";
        public string?  Phone { get; set; } = "";
        public string?  Address { get; set; } = "";
        public string?  FullName { get; set; } = "";
        public string?  BankAccount { get; set; } = "";
        public string?  ReceiverID { get; set; } = "";
        public string?  LocalName { get; set; } = "";
        public string?  ToCountry { get; set; } = "All";
    }
    private ElementReference E_BankName;
    private ElementReference E_AccountNo;
    private ElementReference E_Accountype;

    private ElementReference E_IDType;
    private ElementReference E_ID;
    private ElementReference E_CountryIssue;
    private ElementReference E_StateIssue;
    public ElementReference E_IssueDate;
    public ElementReference E_ExpireDate;
    public ElementReference E_DOB;
    private ElementReference E_SSN;
    private ElementReference E_Occupation;
    private ElementReference E_Message;
    private ElementReference E_SelectReason;
    private ElementReference E_ReasonforSending;
    private ElementReference E_SecurityAnswer;
    private ElementReference E_CompanyNote;
    private ElementReference E_SelectSOF;
    private ElementReference E_SOF;
    private ElementReference E_MainBank;
    private ElementReference E_BankAddress;
    private ElementReference E_BankCode;
    private ElementReference E_BankProvince;
    private ElementReference E_BankCity;
    private ElementReference E_PayoutState;
    private ElementReference E_PayoutCity;
    private ElementReference E_PayoutAddress;
    private ElementReference E_ToCurrency;

    public string?  C_ToCurrency { get; set; } = "white!important";

    public string?  C_MainBank { get; set; } = "white!important";
    public string?  C_BankAddress { get; set; } = "white!important";
    public string?  C_BankCode { get; set; } = "white!important";
    public string?  C_BankProvince { get; set; } = "white!important";
    public string?  C_BankCity { get; set; } = "white!important";
    public string?  C_BankName { get; set; } = "white!important";
    public string?  C_AccountNo { get; set; } = "white!important";

    public class ModelBank
    {
        public string?  ID { get; set; } = "";
        public string?  MainBank { get; set; } = "";
        public string?  bankCity { get; set; } = "";
        public string?  Province { get; set; } = "";
        public string?  City { get; set; } = "";
        public string?  BankID { get; set; } = "";
        public string?  AccountNo { get; set; } = "";
        public string?  Branch { get; set; } = "";
        public string?  Swiftcode { get; set; } = "";
        public string?  Currency { get; set; } = "";
        public string?  BANK_NAME { get; set; } = "";

    }
    string Noidung = "";
    private bool isBankOther = false;
    private string displayBankOther = "None";
    private dynamic dates = new Array[] { };
    private dynamic partners = new Array[] { };
    private dynamic provinces = new Array[] { };
    private dynamic branchs = new Array[] { };
    private dynamic employees = new Array[] { };
    private dynamic currencies = new Array[] { };
    private dynamic paymentMethods = new Array[] { };
    private dynamic batchs = new Array[] { };
    private dynamic emailStatuses = new Array[] { };
    private dynamic statuses = new Array[] { };
    private dynamic searchs = new Array[] { };
    private bool isViewTable = false;
    private string isViewingSender = "None";
    private bool isViewingReport = false;
    private dynamic reports = null;
    private dynamic Table = new Array[] { };
    private dynamic Table1 = new Array[] { };
    private dynamic Table2 = new Array[] { };
    private string error = "";
    private string CustID { get; set; }
    private string BCustID { get; set; }
    string noidungpage = "";
    int totalPages;
    Int64 totalRecords;
    Int64 curPage;
    int pagerSize;
    Int64 pageSize;
    int startPage;
    int endPage;
    int firstPage;
    int lastPage;
    public List<TypeofStatusModel> TypeofStatusList { get; set; }= new List<TypeofStatusModel>();
    TypeofStatusModel TypeofStatuses { get; set; }
    public string?  TypeofStatus { get; set; }

    private ModelSearch model = new ModelSearch();
    public List<StateList> ReceiveStateList { get; set; }= new List<StateList>();
    public List<StateList> ReceiveStateListAll { get; set; } = new List<StateList>();
    public List<ReceiveCountryList> ReceiveCountryList { get; set; }= new List<ReceiveCountryList>();
    ReceiveCountryList ReceiveCountryLists { get; set; }
    private string ReceiveCountrylist { get; set; }
    public List<CityModel> BCityStateList { get; set; } = new List<CityModel>();
    public List<CityModel> CityList { get; set; } = new List<CityModel>();
    public List<BankCity> BankCityList { get; set; } = new List<BankCity>();
    public List<CustomerList> CustomerList { get; set; } = new List<CustomerList>();

    public List<CustomerList> CustomerListList { get; set; }= new List<CustomerList>();
    public List<ReportRecordCountContent> ReportRecordCount { get; set; }
    public List<CustomerComboList> CustomerComboListList { get; set; }= new List<CustomerComboList>();
    public CustomerComboList[] CustomerComboList { get; set; }
    CustomerComboList CustomerComboLists { get; set; }
    public List<TypeofStatusModel> TypeofStatusAllList { get; set; } = new List<TypeofStatusModel>();


    public List<B_CustomerList> B_CustomerList { get; set; } = new List<B_CustomerList>();

    public RecipientComboList[] RecipientComboList { get; set; }
    RecipientComboList RecipientComboLists { get; set; }

    //public List<CustomerComboList> CustomerComboList { get; set; }
    //CustomerComboList CustomerComboLists { get; set; }

    //public List<RecipientComboList> RecipientComboList { get; set; }
    public List<HistoryCustomerSendTran> HistoryCustomerSendList { get; set; }
    private bool Viewhistory = false;
    public int Height { get; set; } = 800; public int HeightBody { get; set; } = 800;
    public String MaxHeight { get; set; } = "500px"; public String MaxHeightBody { get; set; } = "800px";
    SendCountryList SendCountryLists { get; set; }
    private string SendCountrylist { get; set; }
    DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true,CloseOnEscapeKey = true,CloseButton=true,Position=DialogPosition.Center };
    private bool isEditRecipient = false;
    private bool IsViewDelete = false;
    private bool isBUploadFileB = false;
    public dynamic EditHistoryList = new Array[] { };
    public dynamic BlockHistoryList = new Array[] { };
    public dynamic KYCHistoryList = new Array[] { };
    public dynamic OFACHistoryList = new Array[] { };
    private bool editBCust = false;
    private bool isLoading = false;
    private bool iseditBCustomer = false;
    private bool isUpdateStatus = false;

    bool IsAddNewBank = false;
    bool IsEditBank = false;
    bool isAddBank = false;
    bool IsEBank = false;
    bool IsDelEBank = false;
    bool IsChangeExpire = false;
    bool IsBehalf = false;
    bool IsShow = true;
    bool IsShowStatus = false;
    bool IsEditBankButton = true;
    private ModelBank modelAddBank = new ModelBank();
    private ModelBank modelEditBank = new ModelBank();
    ReceiveCurrencyList ReceiveCurrencyLists { get; set; }
    private string ReceiveCurrencyCode = "";
    public List<BankIDList> BankIDList { get; set; } = new List<BankIDList>();
    public List<BankIDList> BankIDAllList { get; set; } = new List<BankIDList>();
    BankList BankIDLists { get; set; }
    private string BID = "";
    public List<BankList> BankList { get; set; } = new List<BankList>();
    public List<BankList> BankListFill { get; set; } = new List<BankList>();
    //private dynamic BankList = new Array[] { };
    BankList BankLists { get; set; }
    private string BANK_CODE = "";
    private List<ReceiveCurrencyList> ReceiveCurrencyList = new List<ReceiveCurrencyList> { };
    public List<BankCity> BankDistrictList { get; set; } = new List<BankCity>();
    BankCity DistrictList { get; set; }
    private string DistrictCode = "";

    public List<MainBanks> MainBanksList { get; set; } = new List<MainBanks>();
    MainBanks MainBank { get; set; }
    private string MainBanksID = "";
    private string displayBank = "None";
    private string displayUS = "None";
    private string displayBankCountry = "None";
    public List<StateList> ProvinceBankList { get; set; } = new List<StateList>();
    public string?  C_FileName  { get; set; } = "white!important";
    public long maxFileSize = 1024 * 15 * 1024;
    public int maxAllowedFiles = 5;
    public string?  back { get; set; } = "white!important";
    public string?  backerror { get; set; } = "yellow!important";
    public string?  backDisable { get; set; } = "#e9ecee!important";
    int activeIndex = 0;
    Int64 idDel = 0;
    private string displayCityPH = "None";
    private string displayCityNoPH = "Initial";
    private ElementReference E_RFirstName;
    private ElementReference E_RMiddleName;
    private ElementReference E_RLastName;
    private ElementReference E_RLocalName;
    private ElementReference E_RID;
    private ElementReference E_RFullName2;
    private ElementReference E_RAddress;
    private ElementReference E_RState;
    private ElementReference E_RCity;
    private ElementReference E_RZipcode;
    private ElementReference E_REmail;
    private ElementReference E_RPhone;
    private ElementReference E_RPhone2;
    public ElementReference E_FileName;
    public ElementReference E_ReasonforUpdate ;
    public ElementReference E_ReasonforBlock ;
    public ElementReference E_Status ;

    public string?  C_RFirstName { get; set; } = "#e9ecee!important";
    public string?  C_RMiddleName { get; set; } = "#e9ecee!important";
    public string?  C_RLastName { get; set; } = "#e9ecee!important";
    public string?  C_RLocalName { get; set; } = "#e9ecee!important";
    public string?  C_RID { get; set; } = "#e9ecee!important";
    public string?  C_RFullName2 { get; set; } = "#e9ecee!important";
    public string?  C_RAddress { get; set; } = "#e9ecee!important";
    public string?  C_RState { get; set; } = "#e9ecee!important";
    public string?  C_RCity { get; set; } = "#e9ecee!important";
    public string?  C_RZipcode { get; set; } = "#e9ecee!important";
    public string?  C_REmail { get; set; } = "#e9ecee!important";
    public string?  C_RPhone { get; set; } = "#e9ecee!important";
    public string?  C_RPhone2 { get; set; } = "#e9ecee!important";
    public string?  C_ReasonforUpdate { get; set; } = "#e9ecee!important";
    public string?  C_ReasonforBlock { get; set; } = "#e9ecee!important";
    public string?  C_Status { get; set; } = "#e9ecee!important";
    public B_CustomerList modelEditBCust = new B_CustomerList();
    BankCity BankCityLists { get; set; }
    //  public List<BankIDList> BankIDList { get; set; } = new List<BankIDList>();

    public class ModelUpfile
    {
        public string?  FileName { get; set; } = "";
    }
    public List<IBrowserFile> loadedFiles = new();
    public ModelUpfile modelfile = new ModelUpfile();
    public List<CustomerProfileFile> BSenderDocumentsList { get; set; }= new List<CustomerProfileFile>(); 
    public List<CustomerProfileFile> BSenderDocumentsListDownload { get; set; }= new List<CustomerProfileFile>();
    DialogOptions dialogOptionsStatus = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, CloseButton = true, Position = DialogPosition.Center };
    string pagename = "/Customer/SearchRecipient";
    // MudDialog visibility controls
    private bool isModalVisible = false;
    private bool isModalStatusVisible = false;
    private bool isModalProfileVisible = false;

    // Note: These change handlers are no longer needed since we're using @bind for two-way data binding
    // The @bind directive automatically handles the change events and updates the model properties
    protected async void ChangeBankAdd(ChangeEventArgs e)
  {
      StateHasChanged();
      modelAddBank.AccountNo = e.Value.ToString();
      StateHasChanged();
      if (!string.IsNullOrEmpty(modelAddBank.AccountNo))
      {
          string newaccount = "";
          string account = modelAddBank.AccountNo.Replace("-", "").Replace(" ", "");
          if (account.Length > 4)
          {
              for (int i = 0; i < account.Length; i++)
              {
                  if ((i) % 4 == 0)
                  {
                      newaccount += " ";
                  }
                  newaccount += account.Substring(i, 1);
              }
          }
          modelAddBank.AccountNo = newaccount.Trim();
      }
      StateHasChanged();
  }
  protected async void ChangeBankEdit(ChangeEventArgs e)
  {
      StateHasChanged();
      modelEditBank.AccountNo = e.Value.ToString();
      StateHasChanged();
      if (!string.IsNullOrEmpty(modelEditBank.AccountNo))
      {
          string newaccount = "";
          string account = modelEditBank.AccountNo.Replace("-", "").Replace(" ", "");
          if (account.Length > 4)
          {
              for (int i = 0; i < account.Length; i++)
              {
                  if ((i) % 4 == 0)
                  {
                      newaccount += " ";
                  }
                  newaccount += account.Substring(i, 1);
              }
          }
          modelEditBank.AccountNo = newaccount.Trim();
      }
      StateHasChanged();
  }
    private async Task OnShowModalProfileClick()
    {
        isModalProfileVisible = true;
        StateHasChanged();
    }

    private async Task OnHideModalProfileClick()
    {
        isModalProfileVisible = false;
        StateHasChanged();
    }
    private async Task OnShowModalStatusClick()
    {
        isModalStatusVisible = true;
        StateHasChanged();
    }

    private async Task OnHideModalStatusClick()
    {
        isModalStatusVisible = false;
        StateHasChanged();
    }
    private async Task OnShowModalClick()
    {
        isModalVisible = true;
        StateHasChanged();
    }

    private async Task OnHideModalClick()
    {
        isModalVisible = false;
        StateHasChanged();
    }
    protected async void ChangBankCityAdd(ChangeEventArgs e)
    {
        StateHasChanged();
        modelAddBank.City = e.Value.ToString();
        StateHasChanged();
    }
    protected async void ChangBankCityEdit(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.City = e.Value.ToString();
        StateHasChanged();
    }
    private async Task AddNewBank()
    {
        modelAddBank = new ModelBank();
        if(modelEditBCust.COUNTRY=="CN")
        {
            modelAddBank.Currency ="RMB";
        }
        else
        {
            modelAddBank.Currency ="VND";
        }

        IsAddNewBank = true;
        // editBCust=false;
        await OnHideModalProfileClick();
        await getBank("Add");
        await getBankCity(modelAddBank.BankID, "Add");
        dynamic payload2 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Customer/GetBankProvince",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country = modelEditBCust.COUNTRY
        };
        StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
        if (respProvince.Status == 200)
        {
            ProvinceBankList = respProvince.Content.BankProvinceList;
        }
        else
        {
            ProvinceBankList = new List<StateList>();
        }
        //dynamic payload = new
        //{
        //    Form = "/Transaction/NewTransaction",
        //    FormName = "New Transaction",
        //    Action = "GetBankList",
        //    UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
        //    UserID = model.UserID,
        //    CountryCode = model.ToCountry,
        //    Country = model.ToCountry,
        //    PaymentAgent = "",
        //    CurrencyCode = model.ToCurrency,
        //    pageIndex = 1,
        //    pageSize = 50
        //};
        //if (model.ToCountry == "CN")
        //{
        //    dynamic payload1 = new
        //    {
        //        Form = "/Transaction/NewTransaction",
        //        FormName = "New Transaction",
        //        Action = "getMainBank",
        //        UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
        //        UserID = model.UserID,
        //        CountryCode = model.ToCountry,
        //        Country = model.ToCountry,
        //        PaymentAgent = model.PaymentAgent,
        //        Currency = model.ToCurrency
        //    };
        //    displayBankCountry = "initial";
        //    MainBanksListResp respMain = await HttpService.Post<MainBanksListResp>("/Customer/getMainBank", payload1);
        //    if (respMain.Status == 200)
        //    {
        //        MainBanksList = respMain.Content.MainBankList;
        //    }
        //    else
        //    {
        //        MainBanksList = new List<MainBanks>();
        //    }
        //    dynamic payload2 = new
        //    {
        //        Form = "/Transaction/NewTransaction",
        //        FormName = "New Transaction",
        //        Action = "GetBankProvince",
        //        UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
        //        UserID = model.UserID,
        //        Country = model.ToCountry
        //    };
        //    StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
        //    if (respProvince.Status == 200)
        //    {
        //        ProvinceBankList = respProvince.Content.BankProvinceList;
        //    }
        //    else
        //    {
        //        ProvinceBankList = new List<StateList>();
        //    }
        //}
        //else
        //{
        //    displayBankCountry = "none";
        //}

        //BankListResp resp = await HttpService.Post<BankListResp>("/Index/GetBankList", payload);
        //if (resp.Status == 200)
        //{

        //    BankList = resp.Content.ListBank;
        //    modelAddBank.BankID = resp.Content.ListBank[0].BANK_CODE.ToString();
        //    modelAddBank.BANK_NAME = resp.Content.ListBank[0].BANK_NAME.ToString();
        //}
        //else
        //{
        //    if (resp.Status == 99)
        //    {
        //        toastService.ShowWarning("User is not Exist or Expire");
        //        await AuthService.Logout();
        //    }
        //    BankList = new List<BankList>();
        //}
        // ChangeBank0();
        this.StateHasChanged();

    }
    protected async void ChangBankUpdate(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.BankID = e.Value.ToString();


        BankListFill = BankList.Where(x => x.BANK_CODE == modelEditBank.BankID).ToList();
        if (BankListFill.Count>0)
        {
            BankIDLists = BankListFill.FirstOrDefault();
            string BANK_NAME = BankIDLists.BANK_NAME;
            if (BANK_NAME != "OTHER")
            {
                modelEditBank.BANK_NAME = BANK_NAME;
                isBankOther = true;
            }
            else
            {
                isBankOther = false;
                modelEditBank.BANK_NAME = "";
            }
        }

        modelEditBank.Swiftcode = e.Value.ToString();
        await getBankCity(modelEditBank.BankID, "Edit");
        StateHasChanged();
    }
    private async Task<bool> ValidateAddBank()
    {
        StateHasChanged();
        bool result = true;
        bool focus = true;
        if (string.IsNullOrEmpty(modelAddBank.BANK_NAME))
        {
            result = false;
            C_BankName = backerror;
            toastService.ShowWarning("Enter Bank Name");
            await E_BankName.FocusAsync();
            focus = false;
        }
        else
        {
            C_BankName = back;
        }
        if (string.IsNullOrEmpty(modelAddBank.AccountNo))
        {
            result = false;
            C_AccountNo = backerror;
            toastService.ShowWarning("Enter Account No");
            await E_AccountNo.FocusAsync();
            focus = false;
        }
        else
        {
            C_AccountNo = back;
        }
        if (modelAddBank.BankID.ToUpper().Contains("SELECT ONE"))
        {
            result = false;
            C_BankCode = backerror;
            toastService.ShowWarning("Select Bank");
            if (focus)
            {
                await E_BankCode.FocusAsync();
                focus = false;
            }
        }
        else
        {
            C_BankCode = back;
        }
        if (modelEditBCust.COUNTRY == "CN" ||modelEditBCust.COUNTRY == "HK")
        {
            if (modelAddBank.MainBank.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_MainBank = backerror;
                toastService.ShowWarning("Select Main Bank");
                if (focus)
                {
                    await E_MainBank.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_MainBank = back;
            }
            if (modelAddBank.City.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankAddress = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankAddress.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankAddress = back;
            }
            if (modelAddBank.Province.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankProvince = backerror;
                toastService.ShowWarning("Select Province");
                if (focus)
                {
                    await E_BankAddress.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankProvince = back;
            }
            if (modelAddBank.City.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankCity = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankCity.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankCity = back;
            }
        }
        StateHasChanged();
        return result;
    }
    private async Task<bool> ValidateDeleteBank()
    {
        StateHasChanged();
        bool result = true;
        bool focus = true;
        if (string.IsNullOrEmpty(modelEditBank.AccountNo))
        {
            result = false;
            C_AccountNo = backerror;
            toastService.ShowWarning("Enter Account No");
            await E_AccountNo.FocusAsync();
            focus = false;
        }
        else
        {
            C_AccountNo = back;
        }
        if (modelEditBank.BankID.ToUpper().Contains("SELECT ONE"))
        {
            result = false;
            C_BankCode = backerror;
            toastService.ShowWarning("Select Bank");
            if (focus)
            {
                await E_BankCode.FocusAsync();
                focus = false;
            }
        }
        else
        {
            C_BankCode = back;
        }
        if (modelEditBCust.COUNTRY == "CN" ||modelEditBCust.COUNTRY == "HK")
        {
            if (modelAddBank.MainBank.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_MainBank = backerror;
                toastService.ShowWarning("Select Main Bank");
                if (focus)
                {
                    await E_MainBank.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_MainBank = back;
            }
            if (modelAddBank.Branch.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankAddress = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankAddress.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankAddress = back;
            }
            if (modelAddBank.Province.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankProvince = backerror;
                toastService.ShowWarning("Select Province");
                if (focus)
                {
                    await E_BankAddress.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankProvince = back;
            }
            if (modelAddBank.City.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankCity = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankCity.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankCity = back;
            }
        }


        StateHasChanged();
        return result;
    }
    private async Task<bool> ValidateBUpdateBank()
    {
        StateHasChanged();
        bool result = true;
        bool focus = true;
        if (string.IsNullOrEmpty(modelEditBank.BANK_NAME))
        {
            result = false;
            C_BankName = backerror;
            toastService.ShowWarning("Enter Bank Name");
            await E_BankName.FocusAsync();
            focus = false;
        }
        else
        {
            C_BankName = back;
        }
        if (string.IsNullOrEmpty(modelEditBank.AccountNo))
        {
            result = false;
            C_AccountNo = backerror;
            toastService.ShowWarning("Enter Account No");
            await E_AccountNo.FocusAsync();
            focus = false;
        }
        else
        {
            C_AccountNo = back;
        }
        if (modelEditBank.BankID.ToUpper().Contains("SELECT ONE"))
        {
            result = false;
            C_BankCode = backerror;
            toastService.ShowWarning("Select Bank");
            if (focus)
            {
                await E_BankCode.FocusAsync();
                focus = false;
            }
        }
        else
        {
            C_BankCode = back;
        }
        if (modelEditBCust.COUNTRY == "CN" ||modelEditBCust.COUNTRY == "HK")
        {
            if (modelAddBank.MainBank.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_MainBank = backerror;
                toastService.ShowWarning("Select Main Bank");
                if (focus)
                {
                    await E_MainBank.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_MainBank = back;
            }
            if (modelAddBank.City.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankCity = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankCity.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankCity = back;
            }
            if (modelAddBank.Province.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankProvince = backerror;
                toastService.ShowWarning("Select Province");
                if (focus)
                {
                    await E_BankAddress.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankProvince = back;
            }
            if (modelAddBank.City.ToUpper().Contains("SELECT ONE"))
            {
                result = false;
                C_BankCity = backerror;
                toastService.ShowWarning("Select City");
                if (focus)
                {
                    await E_BankCity.FocusAsync();
                    focus = false;
                }
            }
            else
            {
                C_BankCity = back;
            }
        }


        StateHasChanged();
        return result;
    }
    private async Task AddNewBankAPI()
    {
        if (await ValidateAddBank())
        {
            //modelAddBank = new ModelBank();
            IsAddNewBank = true;

            dynamic payload = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "AddNewReceiverBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                B_CustID = modelEditBCust.B_CUST_ID,
                BankCode = modelAddBank.BankID,
                AccountNo = modelAddBank.AccountNo,
                BankProvince = modelAddBank.Province,
                BankCity = modelAddBank.City,
                PaymentAgent = "",
                Country = modelEditBCust.COUNTRY,
                Currency = modelAddBank.Currency,
                BANK_NAME = modelAddBank.BANK_NAME,
                pageIndex = 1,
                pageSize = 50
            };

            BankListIDResp resp = await HttpService.Post<BankListIDResp>("/Customer/AddNewReceiverBank", payload);
            if (resp.Status == 200)
            {
                BankIDAllList = resp.Content.BankList;
                this.StateHasChanged();
                IsAddNewBank = false;
                await OnShowModalProfileClick();
                getBankList();
            }
            else
            {
                if (resp.Status == 99)
                {
                    toastService.ShowWarning("User is not Exist or Expire");
                    await AuthService.Logout();
                }
                BankList = new List<BankList>();
            }
        }

        this.StateHasChanged();

    }
    private async Task DeleteBankAPI()
    {
        if (await ValidateDeleteBank())
        {
            modelAddBank = new ModelBank();
            IsDelEBank = true;
            dynamic payload = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "DeleteReceiverBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                B_CustID = modelEditBCust.B_CUST_ID,
                ID = modelEditBank.ID,
                pageIndex = 1,
                pageSize = 50
            };

            BankListIDResp resp = await HttpService.Post<BankListIDResp>("/Customer/DeleteReceiverBank", payload);
            if (resp.Status == 200)
            {
                BankIDList = resp.Content.BankList;
                IsDelEBank = false;
                IsEditBank = false;
            }
            else
            {
                if (resp.Status == 99)
                {
                    toastService.ShowWarning("User is not Exist or Expire");
                    await AuthService.Logout();
                }
                BankList = new List<BankList>();
            }
        }

        this.StateHasChanged();
    }
    private async Task UpdateBankAPI()
    {
        if (await ValidateBUpdateBank())
        {
            modelAddBank = new ModelBank();
            IsEBank = true;
            dynamic payload = new
            {
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "UpdateReceiverBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                B_CustID = modelEditBCust.B_CUST_ID,
                ID = modelEditBank.ID,
                BankCode = modelEditBank.BankID,
                AccountNo = modelEditBank.AccountNo,
                BankProvince = modelEditBank.Province,
                BankCity = modelEditBank.City,
                PaymentAgent = "",
                Country =modelEditBCust.COUNTRY,
                Currency = modelEditBank.Currency,
                BANK_NAME = modelEditBank.BANK_NAME,
                pageIndex = 1,
                pageSize = 50
            };

            BankListIDResp resp = await HttpService.Post<BankListIDResp>("/Customer/UpdateReceiverBank", payload);
            if (resp.Status == 200)
            {
                BankIDAllList = resp.Content.BankList;
                // BankIDList = resp.Content.BankList;
                IsEBank = false;
                IsEditBank = false;
                await OnShowModalProfileClick();
                getBankList();
            }
            else
            {
                if (resp.Status == 99)
                {
                    toastService.ShowWarning("User is not Exist or Expire");
                    await AuthService.Logout();
                }
                BankList = new List<BankList>();
            }
        }

        this.StateHasChanged();
    }

    protected async void ChangMainBankAdd(ChangeEventArgs e)
    {
        StateHasChanged();
        modelAddBank.MainBank = e.Value.ToString();
        if (modelAddBank.MainBank == "OTHER")
        {
            isBankOther = false;
        }
        else
        {
            isBankOther = true;
        }
        StateHasChanged();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Customer/getBankCity",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelAddBank.Province,
            MainBank = modelAddBank.MainBank,
            CurrencyCode = modelAddBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankCityListResp resp = await HttpService.Post<BankCityListResp>("/Customer/getBankCity", payload);
        if (resp.Status == 200)
        {
            BankCityList = resp.Content.BankCityList;
            BankCityLists = BankCityList.FirstOrDefault();
            modelAddBank.bankCity = BankCityLists.City;
        }
        dynamic payload1 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelAddBank.Province,
            MainBank = modelAddBank.MainBank,
            City = modelAddBank.bankCity,
            CurrencyCode = modelAddBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankListResp resp1 = await HttpService.Post<BankListResp>("/Index/GetBankList", payload1);
        if (resp1.Status == 200)
        {

            BankList = resp1.Content.ListBank;
            modelAddBank.BankID = resp1.Content.ListBank[0].BANK_CODE.ToString();
        }
        else
        {
            if (resp.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        this.StateHasChanged();
        StateHasChanged();
    }
    protected async void ChangMainCityAdd(ChangeEventArgs e)
    {
        StateHasChanged();
        modelAddBank.bankCity = e.Value.ToString();

        dynamic payload1 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelAddBank.Province,
            MainBank = modelAddBank.MainBank,
            City = modelAddBank.bankCity,
            CurrencyCode = modelAddBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankListResp resp1 = await HttpService.Post<BankListResp>("/Index/GetBankList", payload1);
        if (resp1.Status == 200)
        {

            BankList = resp1.Content.ListBank;
            modelAddBank.BankID = resp1.Content.ListBank[0].BANK_CODE.ToString();
        }
        else
        {
            if (resp1.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        this.StateHasChanged();
        StateHasChanged();
    }
    protected async void ChangMainCityEdit(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.bankCity = e.Value.ToString();

        dynamic payload1 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelEditBank.Province,
            MainBank = modelEditBank.MainBank,
            City = modelEditBank.bankCity,
            CurrencyCode = modelEditBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankListResp resp1 = await HttpService.Post<BankListResp>("/Index/GetBankList", payload1);
        if (resp1.Status == 200)
        {

            BankList = resp1.Content.ListBank;
            modelEditBank.BankID = resp1.Content.ListBank[0].BANK_CODE.ToString();
        }
        else
        {
            if (resp1.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        StateHasChanged();
    }
    protected async void ChangMainBankEdit(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.MainBank = e.Value.ToString();
        if (modelEditBank.MainBank == "OTHER")
        {
            isBankOther = false;
        }
        else
        {
            isBankOther = true;
        }
        StateHasChanged();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/getBankCity",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelEditBank.Province,
            MainBank = modelEditBank.MainBank,
            CurrencyCode = modelEditBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankCityListResp resp = await HttpService.Post<BankCityListResp>("/Customer/getBankCity", payload);
        if (resp.Status == 200)
        {
            BankCityList = resp.Content.BankCityList;
            BankCityLists = BankCityList.FirstOrDefault();
            modelEditBank.bankCity = BankCityLists.City;
        }
        dynamic payload1 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelEditBank.Province,
            MainBank = modelEditBank.MainBank,
            City = modelEditBank.bankCity,
            CurrencyCode = modelEditBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankListResp resp1 = await HttpService.Post<BankListResp>("/Index/GetBankList", payload1);
        if (resp1.Status == 200)
        {

            BankList = resp1.Content.ListBank;
            modelAddBank.BankID = resp1.Content.ListBank[0].BANK_CODE.ToString();
        }
        else
        {
            if (resp.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        StateHasChanged();
    }
    protected async void ChangBankProvinceAdd(ChangeEventArgs e)
    {
        StateHasChanged();
        modelAddBank.Province = e.Value.ToString();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Customer/GetBankDistrict",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelAddBank.Province,
            PaymentAgent = "",
            CurrencyCode = modelAddBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankDistrictListResp resp = await HttpService.Post<BankDistrictListResp>("/Customer/GetBankDistrict", payload);
        if (resp.Status == 200)
        {
            BankDistrictList = resp.Content.BankDistrictList;
            modelAddBank.City = BankDistrictList[0].City;
        }
        StateHasChanged();
    }

    protected async void ChangBankProvinceEdit(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.Province = e.Value.ToString();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Customer/GetBankDistrict",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country =modelEditBCust.COUNTRY,
            CountryCode =modelEditBCust.COUNTRY,
            StateID = modelEditBank.Province,
            PaymentAgent = "",
            CurrencyCode = modelEditBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        BankDistrictListResp resp = await HttpService.Post<BankDistrictListResp>("/Customer/GetBankDistrict", payload);
        if (resp.Status == 200)
        {
            BankDistrictList = resp.Content.BankDistrictList;
            modelEditBank.City = BankDistrictList[0].City;
        }
        StateHasChanged();
    }
    protected async void ChangBankAdd(ChangeEventArgs e)
    {
        StateHasChanged();
        modelAddBank.BankID = e.Value.ToString();
        BankListFill = BankList.Where(x => x.BANK_CODE == modelAddBank.BankID).ToList();
        if (BankListFill.Count>0)
        {
            BankIDLists = BankListFill.FirstOrDefault();
            string BANK_NAME = BankIDLists.BANK_NAME;
            if (BANK_NAME != "OTHER")
            {
                modelAddBank.BANK_NAME = BANK_NAME;
                isBankOther = true;
            }
            else
            {
                isBankOther = false;
                modelAddBank.BANK_NAME = "";
            }
        }

        modelAddBank.Swiftcode = e.Value.ToString();
        await getBankCity(modelAddBank.BankID, "Add");
        dynamic payload2 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Customer/GetBankProvince",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            Country = modelEditBCust.COUNTRY
        };
        StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
        if (respProvince.Status == 200)
        {
            ProvinceBankList = respProvince.Content.BankProvinceList;
        }
        else
        {
            ProvinceBankList = new List<StateList>();
        }
        StateHasChanged();
    }
    public List<MenuChildList> menuChildLists { get; set; } = new List<MenuChildList>();
    protected async void ChangetoAddBank(ChangeEventArgs e)
    {

        StateHasChanged();
        modelAddBank.Currency = e.Value.ToString();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            CountryCode =modelEditBCust.COUNTRY,
            Country =modelEditBCust.COUNTRY,
            PaymentAgent = "",
            CurrencyCode = modelAddBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        if (modelEditBCust.COUNTRY == "CN")
        {
            dynamic payload1 = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "/Customer/getMainBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                CountryCode =modelEditBCust.COUNTRY,
                Country =modelEditBCust.COUNTRY,
                PaymentAgent = "",
                Currency = modelAddBank.Currency
            };
            displayBankCountry = "initial";
            MainBanksListResp respMain = await HttpService.Post<MainBanksListResp>("/Customer/getMainBank", payload1);
            if (respMain.Status == 200)
            {
                MainBanksList = respMain.Content.MainBankList;
            }
            else
            {
                MainBanksList = new List<MainBanks>();
            }
            dynamic payload2 = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "/Customer/GetBankProvince",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                Country =modelEditBCust.COUNTRY
            };
            StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
            if (respProvince.Status == 200)
            {
                ProvinceBankList = respProvince.Content.BankProvinceList;
            }
            else
            {
                ProvinceBankList = new List<StateList>();
            }
        }
        else
        {
            displayBankCountry = "none";
        }

        BankListResp resp = await HttpService.Post<BankListResp>("/Index/GetBankList", payload);
        if (resp.Status == 200)
        {

            BankList = resp.Content.ListBank;
            modelAddBank.BankID = resp.Content.ListBank[0].BANK_CODE.ToString();
            modelAddBank.BANK_NAME = resp.Content.ListBank[0].BANK_NAME.ToString();
        }
        else
        {
            if (resp.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        this.StateHasChanged();
        StateHasChanged();
    }
    protected async void ChangetoEditBank(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBank.Currency = e.Value.ToString();
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "/Index/GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            CountryCode = modelEditBCust.COUNTRY,
            Country = modelEditBCust.COUNTRY,
            PaymentAgent = "",
            CurrencyCode = modelEditBank.Currency,
            pageIndex = 1,
            pageSize = 50
        };
        if (modelEditBCust.COUNTRY == "CN")
        {
            dynamic payload1 = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "/Customer/getMainBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                CountryCode =modelEditBCust.COUNTRY,
                Country =modelEditBCust.COUNTRY,
                PaymentAgent = modelEditBank.Currency,
                Currency = modelEditBank.Currency
            };
            displayBankCountry = "initial";
            MainBanksListResp respMain = await HttpService.Post<MainBanksListResp>("/Customer/getMainBank", payload1);
            if (respMain.Status == 200)
            {
                MainBanksList = respMain.Content.MainBankList;
            }
            else
            {
                MainBanksList = new List<MainBanks>();
            }
            dynamic payload2 = new
            {
                Form = "/Transaction/NewTransaction",
                FormName = "New Transaction",
                Action = "/Customer/GetBankProvince",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                Country =modelEditBCust.COUNTRY
            };
            StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
            if (respProvince.Status == 200)
            {
                ProvinceBankList = respProvince.Content.BankProvinceList;
            }
            else
            {
                ProvinceBankList = new List<StateList>();
            }
        }
        else
        {
            displayBankCountry = "none";
        }

        BankListResp resp = await HttpService.Post<BankListResp>("/Index/GetBankList", payload);
        if (resp.Status == 200)
        {

            BankList = resp.Content.ListBank;
            modelAddBank.BankID = resp.Content.ListBank[0].BANK_CODE.ToString();
        }
        else
        {
            if (resp.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            BankList = new List<BankList>();
        }
        this.StateHasChanged();
        StateHasChanged();
    }
    private async Task CloseEditBank()
    {
        await OnShowModalProfileClick();
        IsEditBank = false;
        this.StateHasChanged();
    }
    private async Task CloseHis()
    {
        Viewhistory = false;
        this.StateHasChanged();
    }
    private async Task CloseNewBank()
    {
        await OnShowModalProfileClick();
        IsAddNewBank = false;
        this.StateHasChanged();

    }
    private async Task EditBank(BankIDList modelEdit)
    {
        modelEditBank = new ModelBank();
        modelEditBank.MainBank = modelEdit.MAINBANK;
        modelEditBank.Currency = modelEdit.CURRENCY;
        await getBank("Edit");
        if (modelEditBank.MainBank == "OTHER")
        {
            isBankOther = false;
        }
        else
        {
            isBankOther = true;
        }
        modelEditBank.Province = modelEdit.BankProvince == null ? "" : modelEdit.BankProvince;
        modelEditBank.City = modelEdit.BankCity == null ? "" : modelEdit.BankCity;
        modelEditBank.ID = modelEdit.ID.ToString();

        modelEditBank.BankID = modelEdit.BANK_CODE;
        modelEditBank.Swiftcode = modelEdit.SWIFTCODE;
        modelEditBank.AccountNo = modelEdit.ACCOUNT_NO;
        modelEditBank.BANK_NAME = modelEdit.BANK_NAME;
        displayBankCountry = "none";
        if (modelEditBCust.COUNTRY == "CN")
        {
            dynamic payload1 = new
            {
                Form = "/Customer/SearchRecipient",
                FormName = "Edit Transaction",
                Action = "/Customer/getMainBank",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = model.UserID,
                CountryCode = modelEditBCust.COUNTRY,
                Country = modelEditBCust.COUNTRY,
                PaymentAgent = "",
                Currency = modelEditBank.Currency,
            };
            displayBankCountry = "initial";
            MainBanksListResp respMain = await HttpService.Post<MainBanksListResp>("/Customer/getMainBank", payload1);
            if (respMain.Status == 200)
            {
                MainBanksList = respMain.Content.MainBankList;
            }
            else
            {
                MainBanksList = new List<MainBanks>();
            }
            dynamic payload2 = new
            {
                Form = "/Customer/SearchRecipient",
                FormName = "Edit Transaction",
                Action = "/Customer/GetBankProvince",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = model.UserID,
                Country = modelEditBCust.COUNTRY
            };
            StateBankListResp respProvince = await HttpService.Post<StateBankListResp>("/Customer/GetBankProvince", payload2);
            if (respProvince.Status == 200)
            {
                ProvinceBankList = respProvince.Content.BankProvinceList;
            }
            else
            {
                ProvinceBankList = new List<StateList>();
            }
            var bankList = BankIDList.Find(x => x.ID == modelEditBank.ID);
            if (bankList != null)
            {
                modelEditBank.MainBank = bankList.MAINBANK;
                if (modelEditBank.MainBank == "OTHER")
                {
                    isBankOther = false;
                }
                else
                {
                    isBankOther = true;
                }
                modelEditBank.Province = bankList.BankProvince == null ? "" : bankList.BankProvince;
                modelEditBank.City = bankList.BankCity == null ? "" : bankList.BankCity;
                StateHasChanged();
                dynamic payload3 = new
                {
                    Form = "/Customer/SearchRecipient",
                    FormName = "Edit Transaction",
                    Action = "/Customer/getBankCity",
                    UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                    UserID = model.UserID,
                    Country = modelEditBCust.COUNTRY,
                    CountryCode = modelEditBCust.COUNTRY,
                    StateID = modelEditBank.Province,
                    MainBank = modelEditBank.MainBank,
                    CurrencyCode = modelEditBank.Currency,
                    pageIndex = 1,
                    pageSize = 50
                };
                BankCityListResp resp2 = await HttpService.Post<BankCityListResp>("/Customer/getBankCity", payload3);
                if (resp2.Status == 200)
                {
                    BankCityList = resp2.Content.BankCityList;
                    BankCityLists = BankCityList.FirstOrDefault();
                }
                modelEditBank.bankCity = bankList.CITY;
                modelEditBank.BANK_NAME = bankList.BANK_NAME == null ? "" : bankList.BANK_NAME;
                modelEditBank.Swiftcode = bankList.SWIFTCODE;
                modelEditBank.Currency = bankList.CURRENCY;
                modelEditBank.ID = bankList.ID;
                modelEditBank.AccountNo = bankList.ACCOUNT_NO;
                this.StateHasChanged();
            }

            modelEditBank.BankID = bankList.SWIFTCODE;
            this.StateHasChanged();
        }

        this.StateHasChanged();

        IsEditBank = true;
        await OnHideModalProfileClick();
        modelEditBank.Currency = modelEdit.CURRENCY;
        this.StateHasChanged();

    }

    private async void OnValidSubmit()
    {
        try
        {
            await JS.InvokeVoidAsync("sendTab");
            ViewReport();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OnValidSubmit error: {ex.Message}");
            toastService.ShowError("Error during search. Please try again.");
        }
    }
    public async Task KeySearch(KeyboardEventArgs e)
    {
        if (e.Key.ToLowerInvariant() == "enter")
        {
            await JS.InvokeVoidAsync("sendTab");
            ViewReport();
        }
    }
    public async Task KeyUpdate(KeyboardEventArgs e)
    {
        if (e.Key.ToLowerInvariant() == "enter")
        {
            UpdateBProfile();
        }
    }
    public async Task CloseBEditModel()
    {
        await OnHideModalProfileClick();
        this.StateHasChanged();

    }
    public async Task<bool> ValidateBUpdate()
    {  
        StateHasChanged();
        bool result=true;
        bool focus=true;
        var AhasSymbols = new Regex(@"['~`!@$%^&*()_+=\[{\]};:<>|./?,-]");
        if(modelEditBCust.STATUS==0)
        {
            result=false;
            C_Status = backerror;
            toastService.ShowWarning("Select Status");
            await E_Status.FocusAsync();
            focus = false;
        }
        else
        {
            C_Status = back; 
        }
        if(string.IsNullOrEmpty(modelEditBCust.FIRSTNAME))
        {
            result=false;
            C_RFirstName = backerror;
            toastService.ShowWarning("Enter First Name");
            await E_RFirstName.FocusAsync();
            focus = false;
        }
        else
        {
            C_RFirstName = back; 
        }
        if(string.IsNullOrEmpty(modelEditBCust.LASTNAME))
        {
            result=false;
            C_RLastName = backerror;
            toastService.ShowWarning("Enter Recipient Last Name");
            if(focus)
            {
                await E_RLastName.FocusAsync();
                focus = false;
            }            
        }
        else
        {
            C_RLastName = back; 
        }
        if(string.IsNullOrEmpty(modelEditBCust.ADDRESS))
        {
            result=false;
            C_RAddress = backerror;
            toastService.ShowWarning("Enter Recipient Address");
            if(focus)
            {
                await E_RAddress.FocusAsync();
                focus = false;
            }            
        }
        else
        {
            C_RAddress = back;
        }


        if(string.IsNullOrEmpty(modelEditBCust.PROVINCE_ID))
        {
            result=false;
            C_RState = backerror;
            toastService.ShowWarning("Enter Recipient State");
            if(focus)
            {
                await E_RState.FocusAsync();
                focus = false;
            }            
        }
        else
        {
            C_RState = back;
        }

        if(string.IsNullOrEmpty(modelEditBCust.PHONE1))
        {
            result=false;
            toastService.ShowWarning("Enter Recipient Phone");           
        }


        if(string.IsNullOrEmpty(modelEditBCust.COMMENT))
        {
            result=false;
            C_ReasonforUpdate = backerror;
            toastService.ShowWarning("Enter Reason for Update");
            if(focus)
            {
                await E_ReasonforUpdate.FocusAsync();
                focus = false;
            }            
        }
        else
        {
            C_ReasonforUpdate= back; 
        }

        StateHasChanged();
        return result;
    }
    public async Task UpdateBProfile()
    {
        try
        {
            this.StateHasChanged();

            if (await ValidateBUpdate())
            {
                dynamic payload = new
                {
                    Form = "/Customer/SearchRecipient",
                    FormName = "Search Recipient",
                    Action = "/Customer/UpdateRecipientProfile - UpdateBProfile",
                    UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                    UserID = AuthService.userMTRedSun.Id.ToString(),
                    B_CUST_ID = modelEditBCust.B_CUST_ID,
                    FIRSTNAME = modelEditBCust.FIRSTNAME,
                    MIDDLENAME = modelEditBCust.MIDDLENAME,
                    LASTNAME = modelEditBCust.LASTNAME,
                    LOCALNAME = modelEditBCust.LOCALNAME,

                    PASSPORT_NO = modelEditBCust.PASSPORT_NO,
                    CN_FIRSTNAME = modelEditBCust.CN_FIRSTNAME,
                    ADDRESS = modelEditBCust.ADDRESS,
                    PROVINCE_ID = modelEditBCust.PROVINCE_ID,
                    CITY = modelEditBCust.CITY,
                    ZIP_CODE = modelEditBCust.ZIP_CODE,
                    PHONE1 = modelEditBCust.PHONE1,
                    PHONE2 = modelEditBCust.PHONE2,
                    EMAIL = modelEditBCust.EMAIL,                   
                    STATUS = modelEditBCust.STATUS,
                    ReasonforBlock = modelEditBCust.ReasonforBlock,
                    ReasonforUpdate = modelEditBCust.COMMENT,
                    COUNTRY= modelEditBCust.COUNTRY
                };
                this.StateHasChanged();

                var resp = await HttpService.Request("post", "/Customer/UpdateRecipientProfile", payload);
                if (resp.Status.ToString() == "200")
                {
                    toastService.ShowSuccess("Update Status Successful");
                    ViewReport();
                    editBCust = false;
                }
                else
                {
                    if (resp.Status == 99)
                    {
                        toastService.ShowWarning("User is not Exist or Expire");
                        await AuthService.Logout();
                    }
                    EditHistoryList = new Array[] { };
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
    }
    protected async void editBCustomerReport()
    {
        isEditRecipient = false;
        C_RFirstName = "white!important";
        C_RMiddleName = "white!important";
        C_RLastName = "white!important";
        C_RLocalName = "white!important";
        C_RID = "white!important";
        C_RFullName2 = "white!important";
        C_RAddress = "white!important";
        C_RState = "white!important";
        C_RCity = "white!important";
        C_RZipcode = "white!important";
        C_REmail = "white!important";
        C_RPhone = "white!important";
        C_RPhone2 = "white!important";
        C_ReasonforUpdate = "white!important";
        C_ReasonforBlock = "white!important";
        C_Status = "white!important";
        StateHasChanged();
    }
    protected async void ZipcodeReciverChange(ChangeEventArgs e)
    {
        StateHasChanged();
        if (!string.IsNullOrEmpty(e.Value == null ? "" : e.Value.ToString()) && e.Value.ToString().Length >= 4)
        {
            StateHasChanged();
            dynamic payload = new
            {
                Form = "/Customer/SearchRecipient",
                FormName = "Search Recipient",
                Action = "/Index/getZipcodeSearch - ZipcodeReciverChange",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                Zipcode = e.Value.ToString(),
                CountryCode = modelEditBCust.COUNTRY
            };
            List<CityModel> CityListFilter = new List<CityModel>();
            CityListResp Resp = await HttpService.Post<CityListResp>("/Index/getZipcodeSearch", payload);
            if (Resp.Status == 200)
            {
                if (Resp.Content.CityList.Count() > 0)
                {
                    modelEditBCust.CITY = Resp.Content.CityList[0].City == null ? "" : Resp.Content.CityList[0].City.ToString();
                    modelEditBCust.STATE = Resp.Content.CityList[0].StateId == null ? "" : Resp.Content.CityList[0].StateId.ToString();
                }
                else
                {
                    modelEditBCust.CITY = "";
                    modelEditBCust.STATE = "";
                }
            }
        }

        StateHasChanged();
    }
    protected async void ChangeRState(ChangeEventArgs e)
    {

        StateHasChanged();
        modelEditBCust.STATE = e.Value.ToString();
        modelEditBCust.PROVINCE_ID = e.Value.ToString();
        if (modelEditBCust.COUNTRY == "PH")
        {
            BCityStateList = CityList.Where(x => x.StateId == modelEditBCust.PROVINCE_ID).ToList();
            if (BCityStateList.Count() > 0)
            {
                modelEditBCust.CITY = BCityStateList[0].City.ToString();
            }
        }


        StateHasChanged();
    }
    protected async void ChangeRID(ChangeEventArgs e)
    {
        StateHasChanged();
        modelEditBCust.PASSPORT_NO = e.Value.ToString().Replace(" ","");
        StateHasChanged();

        if (!string.IsNullOrEmpty(modelEditBCust.PASSPORT_NO))
        {
            string newaccount = "";
            string account = modelEditBCust.PASSPORT_NO.Replace("-", "").Replace(" ", "");
            if (account.Length > 4)
            {
                for (int i = 0; i < account.Length; i++)
                {
                    if ((i) % 4 == 0)
                    {
                        newaccount += " ";
                    }
                    newaccount += account.Substring(i, 1);
                }
            }
            StateHasChanged();
            modelEditBCust.PASSPORT_NO = newaccount.Trim();
            if (modelEditBCust.COUNTRY == "CN")
            {
                if (modelEditBCust.PASSPORT_NO.ToString().Length != 22)
                {
                    C_RID = backerror;
                    await E_RID.FocusAsync();
                }
            }
        }
        StateHasChanged();
    }
    public async Task BDeleteFile(Int64 id)
    {

        idDel = id;
        IsViewDelete = true;

    }
    public async Task BDownloadFileFromStream(string FileName, Int64 No)
    {
        try
        {
            dynamic payload = new
            {
                Form = "/Customer/SearchRecipient",
                FormName = "Search Recipient",
                Action = "/Customer/RecipientProfileFileID - BDownloadFileFromStream",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                B_CustID = modelEditBCust.B_CUST_ID,
                ID = No
            };
            //GetCustomerFileID
            CustomerProfileFileResp respdoc = await HttpService.Post<CustomerProfileFileResp>
        ("/Customer/RecipientProfileFileID", payload);
            if (respdoc.Status.ToString() == "200")
            {
                BSenderDocumentsListDownload = respdoc.Content;
            }
            else
            {
                toastService.ShowWarning(respdoc.Message.ToString());
                BSenderDocumentsListDownload = new List<CustomerProfileFile>();
            }
            if (BSenderDocumentsListDownload.Count > 0)
            {
                foreach (var item in BSenderDocumentsListDownload)
                {
                    var fileStream = GetFileStream(item.FileLoad);
                    using var streamRef = new DotNetStreamReference(stream: fileStream);
                    await JS.InvokeVoidAsync("downloadFileFromStream", item.FileName, streamRef);
                }
            }
            else
            {
                toastService.ShowWarning("Nothing to download");
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
            toastService.ShowError(ex.Message);
        }
    }
    public async Task BCloseDelete()
    {
        IsViewDelete = false;
        this.StateHasChanged();

    }

    private async Task EditRecipient(B_CustomerList item)
    {
        BankIDList = new List<BankIDList>();
        isEditRecipient = true;
        // editBCust = true;
        await OnShowModalProfileClick();
        modelEditBCust = new B_CustomerList();
        modelEditBCust = item;
        ReceiveCurrencyList = AuthService.userMTRedSun.ReceiveCurrencyList.Where(x => x.CountryCode.Contains(item.COUNTRY)).ToList();

        ReceiveStateList = ReceiveStateListAll.Where(x => x.CountryCode == item.COUNTRY).ToList();
        if (item.COUNTRY == "PH")
        {
            BCityStateList = CityList.Where(x => x.StateId == modelEditBCust.STATE).ToList();
            if (BCityStateList.Count() > 0)
            {
                modelEditBCust.CITY = BCityStateList[0].City.ToString();
            }
        }
        else
        {
            if (item.COUNTRY == "CN")
            {
                displayBankCountry="initial";
            }
            else
            {
                displayBankCountry="none";
            }
        }
        getBankList();
        getProfileHis();
        getProfileFile();
        getProfileBlock();
        // CustomerProfileFileResp
        //var respdoc = await HttpService.Request("post", "/Customer/CustomerProfileFile", payload);


        this.StateHasChanged();
    }
    public async Task CloseStatus()
    {
        await OnHideModalStatusClick();
        this.StateHasChanged();
    }
    public async Task getBankList()
    {
        dynamic payload5 = new
        {            
            Form = "/Customer/SearchRecipient",
            FormName = "Search Recipient",
            Action = "/Customer/GetReceiverBankID - EditRecipient",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            B_CustID = modelEditBCust.B_CUST_ID,
            Country =modelEditBCust.COUNTRY,
            PaymentAgent = "",
            Currency = "",
            ID= 0,
            pageIndex = 1,
            pageSize = 50
        };
        BankListIDResp respB = await HttpService.Post<BankListIDResp>("/Customer/GetReceiverBankID", payload5);
        if (respB.Status == 200)
        {
            BankIDList = respB.Content.BankList;
        }
        StateHasChanged();
    }
    public async Task getProfileHis()
    {
        dynamic payload = new
        {
            Form = "/Customer/SearchRecipient",
            FormName = "Search Recipient",
            Action = "/Customer/RecipientProfileHistory - EditRecipient",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            B_CustID = modelEditBCust.B_CUST_ID,
            pageIndex = 1,
            pageSize = 50
        };
        var resp = await HttpService.Request("post", "/Customer/RecipientProfileHistory", payload);
        if (resp.Status.ToString() == "200")
        {
            EditHistoryList = resp.Content;
        }
        else
        {
            if (resp.Status == 99)
            {
                toastService.ShowWarning("User is not Exist or Expire");
                await AuthService.Logout();
            }
            EditHistoryList = new Array[] { };
        }
        StateHasChanged();
    }
    public async Task getProfileFile()
    {
        dynamic payload = new
        {
            Form = "/Customer/SearchRecipient",
            FormName = "Search Recipient",
            Action = "/Customer/RecipientProfileHistory - EditRecipient",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            B_CustID = modelEditBCust.B_CUST_ID,
            pageIndex = 1,
            pageSize = 50
        };
        CustomerProfileFileResp respdoc = await HttpService.Post<CustomerProfileFileResp>
             ("/Customer/RecipientProfileFile", payload);
        if (respdoc.Status.ToString() == "200")
        {
            BSenderDocumentsList = respdoc.Content;
        }
        else
        {
            BSenderDocumentsList = new List<CustomerProfileFile>();
        }
        StateHasChanged();
    }
    public async Task getProfileBlock()
    {
        dynamic payload = new
        {
            Form = "/Customer/SearchRecipient",
            FormName = "Search Recipient",
            Action = "/Customer/RecipientProfileHistory - EditRecipient",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            B_CustID = modelEditBCust.B_CUST_ID,
            pageIndex = 1,
            pageSize = 50
        };
        var respBlock = await HttpService.Request("post", "/Customer/RecipientProfileBlockHistory", payload);
        if (respBlock.Status.ToString() == "200")
        {
            BlockHistoryList = respBlock.Content;
        }
        else
        {
            BlockHistoryList = new Array[] { };
        }
        StateHasChanged();
    }
    public async Task<bool> ValidateStatus()
    {
        StateHasChanged();
        bool result = true;
        bool focus = true;
        if (string.IsNullOrEmpty(modelStatus.ReasonforUpdate))
        {
            result = false;
            C_ReasonforUpdate = backerror;
            toastService.ShowWarning("Enter Note");
            await E_ReasonforUpdate.FocusAsync();
            focus = false;
        }
        else
        {
            C_ReasonforUpdate = back;
        }
        if (modelStatus.StatusID == 0)
        {
            result = false;
            C_Status = backerror;
            toastService.ShowWarning("Select Status");
            if (focus)
            {
                await E_Status.FocusAsync();
                focus = false;
            }
        }
        else
        {
            C_Status = back;
        }

        StateHasChanged();
        return result;
    }
    public async Task UpdateStatus()
    {
        try
        {            
            this.StateHasChanged();
            if(await ValidateStatus())
            {                
                dynamic payload = new
                {
                    UserID = AuthService.userMTRedSun.Id.ToString(),
                    Form = "/Customer/SearchRecipient",
                    FormName = "Search Recipient",
                    Action = "/Customer/UpdateRecipientStatus - UpdateStatus",
                    UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                    BCustID = modelStatus.BCustID,
                    StatusID = modelStatus.StatusID,
                    ReasonforUpdate= modelStatus.ReasonforUpdate
                };
                var resp = await HttpService.Request("post", "/Customer/UpdateRecipientStatus", payload);
                if (resp.Status.ToString() == "200")
                {
                    isUpdateStatus = false;
                    toastService.ShowSuccess("Update Status Successful");
                    ViewReport();
                }
                else
                {
                    toastService.ShowError(resp.Message.ToString());
                }
            }
        }        
        catch(Exception ex)
        {
            toastService.ShowError(ex.Message.ToString());
        }
        this.StateHasChanged();
    }

    public async Task EditStatus(string BCustID, string FullName, int? StatusId)
    {
        // isUpdateStatus = true;
        modelStatus = new ModelStatus();
        modelStatus.BCustID = BCustID;
        modelStatus.Fullname = FullName;
        C_Status = back;
        C_ReasonforUpdate = back;
        modelStatus.StatusID = Convert.ToInt16(StatusId);
        modelStatus.ReasonforUpdate = "";
        await OnShowModalStatusClick();
        this.StateHasChanged();
    }
    public async Task NotBConfirmBDeleteFile()
    {
        IsViewDelete = false;
        this.StateHasChanged();
    }
    public async Task BConfirmBDeleteFile()
    {
        try
        {

            dynamic payload = new
            {
                Form = "/Customer/SearchRecipient",
                FormName = "Search Recipient",
                Action = "/Customer/DeleteRecipientFile - BConfirmBDeleteFile",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                B_CustID = modelEditBCust.B_CUST_ID,
                ID = idDel
            };

            StateHasChanged();
            var resp = await HttpService.Request("post", "/Customer/DeleteRecipientFile", payload);
            if (resp.Status.ToString() == "200")
            {
                loadedFiles.Clear();

                dynamic payload1 = new
                {

                    Form = "/Customer/SearchRecipient",
                    FormName = "Search Recipient",
                    Action = "/Customer/RecipientProfileFile - BConfirmBDeleteFile",
                    UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                    UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                    B_CustID = modelEditBCust.B_CUST_ID,
                    pageIndex = 1,
                    pageSize = 50
                };
                CustomerProfileFileResp respdoc = await HttpService.Post<CustomerProfileFileResp>
                ("/Customer/RecipientProfileFile", payload1);
                if (respdoc.Status.ToString() == "200")
                {
                    BSenderDocumentsList = respdoc.Content;
                    toastService.ShowSuccess("Delete file successful");
                }
                else
                {
                    toastService.ShowWarning(respdoc.Message.ToString());
                    BSenderDocumentsList = new List<CustomerProfileFile>();
                }
            }
            else
            {
                toastService.ShowWarning(resp.Message.ToString());
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
            toastService.ShowError(ex.Message);
        }
        IsViewDelete = false;
        this.StateHasChanged();
    }
    public void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        StateHasChanged();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                toastService.ShowWarning("File:" + file.Name + ", Error: " + ex.Message);
                //    file.Name, ex.Message);
                //Logger.LogError("File: {Filename} Error: {Error}",
                //    file.Name, ex.Message);
            }
        }

        isLoading = false;
        StateHasChanged();
    }
    protected async void BUploadFile()
    {
        try
        {
            StateHasChanged();

            isBUploadFileB = true;
            if (await ValidateUploadB())
            {
                List<CustomerProfileFile> SenderDocumentsLists = new List<CustomerProfileFile>();
                foreach (var file in loadedFiles)
                {
                    CustomerProfileFile SenderDocumentsfile = new CustomerProfileFile();
                    SenderDocumentsfile.FileName1 = modelfile.FileName;
                    SenderDocumentsfile.FileName = file.Name.ToString();
                    var buffers = new byte[file.Size];
                    await file.OpenReadStream(maxFileSize).ReadAsync(buffers);

                    SenderDocumentsfile.FileLoad = buffers;
                    SenderDocumentsLists.Add(SenderDocumentsfile);
                }
                if (SenderDocumentsLists.Count > 0)
                {
                    BUploadFileModel modelf = new BUploadFileModel();
                    modelf.Form = "/Customer/SearchRecipient";
                    modelf.FormName = "Search Recipient";
                    modelf.Action = "/Customer/UploadRecipientProfileFile - BUploadFile";
                    modelf.UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString();
                    modelf.UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString();
                    modelf.B_CUST_ID = modelEditBCust.B_CUST_ID;
                    modelf.SenderDocumentsLists = SenderDocumentsLists;
                    StateHasChanged();
                    var resp = await HttpService.Request("post", "/Customer/UploadRecipientProfileFile", modelf);
                    if (resp.Status.ToString() == "200")
                    {
                        loadedFiles.Clear();
                        loadedFiles = new();
                        modelfile.FileName = "";
                        StateHasChanged();
                        toastService.ShowSuccess("File upload successful");
                        dynamic payload1 = new
                        {
                            Form = "/Customer/SearchRecipient",
                            FormName = "Search Recipient",
                            Action = "/Customer/RecipientProfileFile - BUploadFile",
                            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                            B_CustID = modelEditBCust.B_CUST_ID,
                            pageIndex = 1,
                            pageSize = 50
                        };
                        CustomerProfileFileResp respdoc = await HttpService.Post<CustomerProfileFileResp>
                        ("/Customer/RecipientProfileFile", payload1);
                        if (respdoc.Status.ToString() == "200")
                        {

                            BSenderDocumentsList = respdoc.Content;

                        }
                        else
                        {
                            toastService.ShowWarning(respdoc.Message.ToString());
                            BSenderDocumentsList = new List<CustomerProfileFile>();
                        }
                    }
                    else
                    {
                        toastService.ShowWarning(resp.Message.ToString());
                    }
                }
            }

        }
        catch (Exception ex)
        {
            isBUploadFileB = false;
            toastService.ShowWarning(ex.Message);
        }
        isBUploadFileB = false;
        StateHasChanged();
    }
    public async Task<bool> ValidateUploadB()
    {
        bool result = true;
        if (loadedFiles.Count == 0)
        {
            toastService.ShowWarning("Nothing to Upload");
            result = false;
        }
        if (string.IsNullOrEmpty(modelfile.FileName))
        {
            C_FileName = backerror;
            await E_FileName.FocusAsync();
            toastService.ShowWarning("Enter File Name");
            result = false;
        }
        StateHasChanged();

        return result;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize auth service for Blazor Server
            await AuthService.Initialize();

            if (AuthService.userMTRedSun == null)
            {
                await AuthService.Logout();
                return;
            }

            // Check menu authorization with null safety
            menuChildLists = AuthService.userMTRedSun.MenuChildList?.ToList() ?? new List<MenuChildList>();
            if (menuChildLists.Count > 0)
            {
                List<MenuChildList> menuChildList = new List<MenuChildList>();
                menuChildList = menuChildLists.Where(x => x.LinkPageColor == pagename).ToList();
                if (menuChildList.Count == 0)
                {
                    toastService.ShowWarning("This function is not authorized!", "Warning");
                    await AuthService.Logout();
                    return;
                }
            }

            var dimension = await Service.GetDimensions();
            Height = dimension.Height+78 - 295;
            if (Height <= 200)
            {
                Height = 200;
            }
            MaxHeight = Height.ToString() + "px"; HeightBody = dimension.Height - 63; MaxHeightBody = HeightBody.ToString() + "px";
            curPage = 1;
            pagerSize = 5;
            pageSize = 50;
            isViewingSender = "None";

            // Initialize data with null safety
            ReceiveStateListAll = AuthService.userMTRedSun.StateListAll?.ToList() ?? new List<StateList>();
            ReceiveCountryList = AuthService.userMTRedSun.ReceiveCountryList?.ToList() ?? new List<ReceiveCountryList>();
            ReceiveCountryLists = ReceiveCountryList.FirstOrDefault();
            if (ReceiveCountryLists != null)
            {
                modelEditBCust.COUNTRY = ReceiveCountryLists.CountryCode?.ToString() ?? "";
            }
            model.UserID = AuthService.userMTRedSun.Id?.ToString() ?? "";

            TypeofStatusList = AuthService.userMTRedSun.TypeofStatusList?.ToList().Where(x => x.StatusID != "0").ToList() ?? new List<TypeofStatusList>();
            TypeofStatusAllList = AuthService.userMTRedSun.TypeofStatusList?.ToList() ?? new List<TypeofStatusList>();
            model.StatusID = "0";

            bool isSearch=false;
            var Phone = sessionStorage.GetItem<string>("RPhone");
            var Address = sessionStorage.GetItem<string>("RAddress");
            var FullName = sessionStorage.GetItem<string>("RFullName");
            var BankAccount = sessionStorage.GetItem<string>("RBankAccount");
            var ReceiverID = sessionStorage.GetItem<string>("RReceiverID");
            var LocalName = sessionStorage.GetItem<string>("RLocalName");

            var RSearch = sessionStorage.GetItem<string>("RSearch");
            if ((RSearch == null ? "0" : RSearch) == "1")
            {
                if (!string.IsNullOrEmpty(Phone))
                {
                    model.Phone = Phone;
                    isSearch = true;
                }
                if (!string.IsNullOrEmpty(Address))
                {
                    model.Address = Address;
                    isSearch = true;
                }
                if (!string.IsNullOrEmpty(FullName))
                {
                    model.FullName = FullName;
                    isSearch = true;
                }
                if (!string.IsNullOrEmpty(BankAccount))
                {
                    model.BankAccount = BankAccount;
                    isSearch = true;
                }
                if (!string.IsNullOrEmpty(ReceiverID))
                {
                    model.ReceiverID = ReceiverID;
                    isSearch = true;
                }
                if (!string.IsNullOrEmpty(LocalName))
                {
                    model.LocalName = LocalName;
                    isSearch = true;
                }
                StateHasChanged();
                if (isSearch)
                {
                    ViewReport();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SearchRecipient initialization error: {ex.Message}");
            toastService.ShowError("Error initializing page. Please refresh and try again.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize floating labels after first render
                await JS.InvokeVoidAsync("initializeFloatingLabels");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing floating labels: {ex.Message}");
            }
        }
    }
    }

    private async Task CloseHistory()
    {
        Viewhistory = false;
        this.StateHasChanged();

    }
    public async Task getData( string Form = "",string FormName = "",string Action = "")
    {
        try{
            StateHasChanged();

            dynamic payload = new
            {
                Form = Form,
                FormName = FormName,
                Action = "/Customer/SearchRecipient - getData",
                UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
                UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
                ToCountry = modelEditBCust.COUNTRY,
                Phone = model.Phone,
                FullName = model.FullName,
                Address = model.Address,
                BankAccount = model.BankAccount,
                ReceiverID = model.ReceiverID,
                Localname = model.LocalName,
                TransID = model.TransID,
                StatusID = model.StatusID,
                 AgentID =  AuthService.userMTRedSun.AgentID == null ? "" : AuthService.userMTRedSun.AgentID.ToString(),
                pageIndex = curPage,
                pageSize = pageSize
            };
            B_CustomerListResp RespCustomer = await HttpService.Post<B_CustomerListResp>
                        ("/Customer/SearchRecipient", payload);
            if (RespCustomer.Status == 200)
            {
                B_CustomerList = RespCustomer.Content.CustomerList;
                isViewingSender = "initial";
                ReportRecordCount = RespCustomer.Content.ReportRecordCount;
                foreach (var item in ReportRecordCount)
                {
                    totalRecords = Convert.ToInt64(item.NoofTran);
                }
                totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
                isViewingSender = "contents";
                if (B_CustomerList.Count == 0)
                {
                    toastService.ShowWarning("Nothing to view");
                }
                //System.Threading.Thread.Sleep(3000);
                isViewTable = true;
            }
            else
            {
                if (RespCustomer.Status == 99)
                {
                    toastService.ShowWarning("User is not Exist or Expire");
                    await AuthService.Logout();
                }
                else
                {
                    toastService.ShowWarning(RespCustomer.Message.ToString());
                }

                ReportRecordCount = new List<ReportRecordCountContent>();
                totalRecords = 0;
                totalPages = 0;
                isViewingSender = "None";

                isViewTable = false;
                B_CustomerList = new List<B_CustomerList>();
            }
        }
        catch(Exception ex)
        {
             toastService.ShowError(ex.Message);            
        }
        
        this.StateHasChanged();
    }
    protected async void ViewReport()
    {
        try
        {
            isViewingReport = true;
            Table1 = new Array[] { };
            error = "";

            StateHasChanged();


            curPage = 1;
            pagerSize = 5;
            startPage = 1;
            endPage = 0;
            isViewingReport = true;
            StateHasChanged();

            sessionStorage.SetItem("RPhone", (model.Phone==null?"":model.Phone));
            sessionStorage.SetItem("RAddress", (model.Address==null?"":model.Address));
            sessionStorage.SetItem("RFullName", (model.FullName == null ? "" : model.FullName));
            sessionStorage.SetItem("RBankAccount", (model.BankAccount == null ? "" : model.BankAccount));
            sessionStorage.SetItem("RReceiverID", (model.ReceiverID == null ? "" : model.ReceiverID));
            sessionStorage.SetItem("RLocalName", (model.LocalName == null ? "" : model.LocalName));
            sessionStorage.SetItem("RTransID", (model.TransID == null ? "" : model.TransID));
            sessionStorage.SetItem("RSearch", "1");
            await getData("/Customer/SearchRecipient", "Search Recipient");
            await SetPageSize("forward");
            await refreshNoidung();
            ////B_CustomerListResp
            //var resp = await HttpService.Request("post", "/Customer/SearchRecipient", payload);
            //if (resp.Status.ToString() == "200")
            //{
            //    isViewingSender = "display";
            //    Table = resp.Content.CustomerList;
            //    //Table1 = resp.Content.CustomerComboList;
            //    toastService.ShowSuccess("Load data successful!");
            //    isViewTable = true;
            //}
            //else
            //{
            //    isViewingSender = "none";
            //    Table = "";
            //    Table1 = "";
            //    toastService.ShowWarning("Nothing to view!");
            //    isViewTable = false;
            //}
            isViewingReport = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            toastService.ShowError(ex.Message);
        }

        isViewingReport = false;
        StateHasChanged();
    } 
    private async Task HistoryTransaction(string BCustID)
    {

        this.StateHasChanged();

        dynamic payload = new
        {
            Form = "/Customer/SearchRecipient",
            FormName = "Search Recipient",
            Action = "/Customer/HistoryRecipient - HistoryTransaction",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = AuthService.userMTRedSun.Id == null ? "" : AuthService.userMTRedSun.Id.ToString(),
            AgentID = AuthService.userMTRedSun.AgentID == null ? "" : AuthService.userMTRedSun.AgentID.ToString(),
            BCustID = BCustID,
            pageIndex = 1,
            pageSize = 50
        };


        HistoryCustomerSendResp resp = await HttpService.Post<HistoryCustomerSendResp>("/Customer/HistoryRecipient", payload);
        if (resp.Status == 200)
        {
            HistoryCustomerSendList = resp.Content.HistoryCustomerSend;
            isViewingSender = "display";
            await OnShowModalClick();
            // Viewhistory = true;
        }
        else
        {
            isViewingSender = "none";
            HistoryCustomerSendList = new List<HistoryCustomerSendTran>();
            // Viewhistory = false;
        }
        this.StateHasChanged();




    }
    protected async Task ChangepageSize(ChangeEventArgs e)
    {
        pageSize = Convert.ToInt64(e.Value.ToString());
        curPage = 1;
        pagerSize = 5;
        startPage = 1;
        endPage = 0;

        await getData();
        await SetPageSize("forward");
        await refreshNoidung();
        StateHasChanged();
    }
    public async Task NavigateToPage(string direction)
    {
        switch (direction)
        {
            case "first":
                SetPageSize("first");
                curPage = startPage;
                break;
            case "next":
                if (curPage < totalPages)
                {
                    if (curPage == endPage)
                    {
                        SetPageSize("forward");
                    }
                    curPage += 1;
                }
                break;
            case "prev":
                if (curPage > 1)
                {
                    if (curPage == startPage)
                    {
                        SetPageSize("back");
                    }
                    curPage -= 1;

                }
                break;
            default:
                SetPageSize("last");
                curPage = totalPages;
                break;
        }

        RefreshRecord(curPage);
        refreshNoidung();
        this.StateHasChanged();
    }
    public async Task refreshNoidung()
    {
        this.StateHasChanged();
        Int64 Totalre = curPage * pageSize;
        if (Totalre > totalRecords)
        {
            Totalre = totalRecords;
        }
        noidungpage = "Showing " + (((curPage - 1) * pageSize) + 1).ToString() + " to " + Totalre + " of " + totalRecords + " entries";
        this.StateHasChanged();
    }
    public async Task SetPageSize(string direction)
    {
        this.StateHasChanged();
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else if (direction == "first")
        {
            startPage = 1;
            endPage = startPage + pagerSize - 1;
        }
        else if (direction == "last")
        {
            startPage = totalPages - pagerSize + 1;
            endPage = totalPages;

        }
        refreshNoidung();
        this.StateHasChanged();
    }


    public async Task RefreshRecord(Int64 currentPage)
    {
        curPage = currentPage;
        await getData();
        await refreshNoidung();

        this.StateHasChanged();
    }
    public Stream GetFileStream(byte[]? FileLoad)
    {
        try
        {
            var fileStream = new MemoryStream(FileLoad);
            return fileStream;
        }
        catch (Exception ex)
        {
            return null;
            error = ex.Message;
            toastService.ShowError(ex.Message);
        }
    }
    public async Task getBank(string TypeBank)
    {
        string CurrencyCode = "";
        if (TypeBank == "Add")
        {
            CurrencyCode = modelAddBank.Currency;
        }
        else
        {
            CurrencyCode = modelEditBank.Currency;

        }
        dynamic payload = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "GetBankList",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = model.UserID,
            Country = modelEditBCust.COUNTRY,
            CountryCode = modelEditBCust.COUNTRY,
            CurrencyCode = CurrencyCode,
            pageIndex = 1,
            pageSize = 50
        };
        BankListResp resp = await HttpService.Post<BankListResp>("/Index/GetBankList", payload);
        if (resp.Status == 200)
        {
            BankList = resp.Content.ListBank;
            if (TypeBank == "Add")
            {
                modelAddBank.BankID = resp.Content.ListBank[0].BANK_CODE.ToString();
                modelAddBank.BANK_NAME = resp.Content.ListBank[0].BANK_NAME.ToString();
                modelAddBank.Swiftcode = resp.Content.ListBank[0].BANK_CODE.ToString();
            }
            
        }
        StateHasChanged();
    }
    public async Task getBankCity(string BankCode, string TypeBank)
    {
        string CurrencyCode="";
        if(TypeBank=="Add")
        {
            CurrencyCode=modelAddBank.Currency;
        }
        else
        {
            CurrencyCode=modelEditBank.Currency;
            
        }
        dynamic payload3 = new
        {
            Form = "/Transaction/NewTransaction",
            FormName = "New Transaction",
            Action = "getBankCity",
            UserName = AuthService.userMTRedSun.UserName == null ? "" : AuthService.userMTRedSun.UserName.ToString(),
            UserID = model.UserID,
            Country =  modelEditBCust.COUNTRY,
            CountryCode = modelEditBCust.COUNTRY,
            //StateID = modelEditBank.Province,
            BankCode = BankCode,
            CurrencyCode = CurrencyCode,
            pageIndex = 1,
            pageSize = 50
        };
        BankCityListResp resp2 = await HttpService.Post<BankCityListResp>("/Customer/getBankCity", payload3);
        if (resp2.Status == 200)
        {
            BankCityList = resp2.Content.BankCityList;
            BankCityLists = BankCityList.FirstOrDefault();
            if (TypeBank == "Add")
            {
                modelAddBank.bankCity = BankCityLists.City;
            }
            else
            {
                modelEditBank.bankCity = BankCityLists.City;
            }
        }
        StateHasChanged();
    }
}

